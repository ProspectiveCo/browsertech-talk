{
  "version": 3,
  "sources": ["../../src/js/constants.js", "../../src/js/utils.js", "../../src/js/scroll_panel.js", "../../src/js/events.js", "../../src/js/view_model.js", "../../src/js/thead.js", "../../src/js/tbody.js", "../../src/js/table.js", "../../src/js/index.js"],
  "sourcesContent": ["/******************************************************************************\n *\n * Copyright (c) 2020, the Regular Table Authors.\n *\n * This file is part of the Regular Table library, distributed under the terms\n * of the Apache License 2.0.  The full license can be found in the LICENSE\n * file.\n *\n */\n\n// Singleton `WeakMap`s to store metadata for td/th elements, as well as the\n// datagrids themselves for each `<perspective-viewer>`\nexport const METADATA_MAP = new WeakMap();\n\n// Output runtime debug info like FPS.\nexport const DEBUG = true;\n\n// The largest size virtual <div> in (px) that Chrome can support without\n// glitching.\nconst isFirefox = navigator.userAgent.toLowerCase().indexOf(\"firefox\") > -1;\nexport const BROWSER_MAX_HEIGHT = isFirefox ? 5000000 : 10000000;\n", "/******************************************************************************\n *\n * Copyright (c) 2020, the Regular Table Authors.\n *\n * This file is part of the Regular Table library, distributed under the terms\n * of the Apache License 2.0.  The full license can be found in the LICENSE\n * file.\n *\n */\n\n/******************************************************************************\n *\n * Profling\n *\n */\n\nlet AVG = 0,\n    TOTAL = 0,\n    START = performance.now();\n\nexport function get_draw_fps() {\n    const now = performance.now();\n    const elapsed = now - START;\n    const avg = AVG;\n    const real_fps = (TOTAL * 1000) / elapsed;\n    const virtual_fps = 1000 / avg;\n    const num_frames = TOTAL;\n    AVG = 0;\n    TOTAL = 0;\n    START = now;\n    return { avg, real_fps, virtual_fps, num_frames, elapsed };\n}\n\nexport function log_perf(x) {\n    AVG = (AVG * TOTAL + x) / (TOTAL + 1);\n    TOTAL += 1;\n}\n\n/******************************************************************************\n *\n * Utils\n *\n */\n\n/**\n * A class method decorate for memoizing method results.  Only works on one\n * arg.\n */\nexport function memoize(_target, _property, descriptor) {\n    const cache = new Map();\n    const func = descriptor.value;\n    descriptor.value = new_func;\n    return descriptor;\n    function new_func(arg) {\n        if (cache.has(arg)) {\n            return cache.get(arg);\n        } else {\n            const res = func.call(this, arg);\n            cache.set(arg, res);\n            return res;\n        }\n    }\n}\n\n/**\n * Identical to a non-tagger template literal, this is only used to indicate to\n * babel that this string should be HTML-minified on production builds.\n */\nexport const html = (strings, ...args) =>\n    strings\n        .map((str, i) => [str, args[i]])\n        .flat()\n        .filter((a) => !!a)\n        .join(\"\");\n\nconst invertPromise = () => {\n    let _resolve;\n    const promise = new Promise((resolve) => {\n        _resolve = resolve;\n    });\n    promise.resolve = _resolve;\n    return promise;\n};\nconst TAGS = new Map();\n\nexport async function flush_tag(tag) {\n    await new Promise(requestAnimationFrame);\n    return await TAGS.get(tag);\n}\n\nexport async function throttle_tag(tag, f) {\n    if (TAGS.has(tag)) {\n        await TAGS.get(tag);\n        if (TAGS.has(tag)) {\n            await TAGS.get(tag);\n            return;\n        }\n    }\n\n    TAGS.set(tag, invertPromise());\n    try {\n        return await f();\n    } finally {\n        const l = TAGS.get(tag);\n        TAGS.delete(tag);\n        l.resolve();\n    }\n}\n", "/******************************************************************************\n *\n * Copyright (c) 2020, the Regular Table Authors.\n *\n * This file is part of the Regular Table library, distributed under the terms\n * of the Apache License 2.0.  The full license can be found in the LICENSE\n * file.\n *\n */\n\nimport { log_perf, html, throttle_tag, flush_tag } from \"./utils\";\nimport { DEBUG, BROWSER_MAX_HEIGHT } from \"./constants\";\n\nimport container_css from \"../../dist/css/container.css\";\nimport sub_cell_offsets from \"../../dist/css/sub-cell-offsets.css\";\n\n/**\n * Handles the virtual scroll pane, as well as the double buffering\n * of the underlying <table>. This DOM structure looks a little like\n * this:\n *\n *     +------------------------+      <- regular-table\n *     | +----------------------|------<- div.rt-virtual-panel\n *     | | +------------------+ |      <- div.rt-scroll-table-clip\n *     | | | +----------------|-|--+   <- table             |\n *     | | | | 1  A  Alabama  | |  |                        |\n *     | | | | 2  B  Arizona  | |  |                        |\n *     | | | | 3  C  Arkansas | |  |                        |\n *     | | | | 4  D  Californi| |  |                        |\n *     | | | | 5  E  Colorado | |  |                        |\n *     | | +------------------+ |  |                        |\n *     +------------------------+  |                        |\n *       |   | 8  H  District of C |                        |\n *       |   +---------------------+                        |\n *       |                                                  |\n *       |                                                  |\n *       |                                                  |\n *       |                                                  |\n *       |                                                  |\n *       +--------------------------------------------------+\n *\n * `overflow: auto` is applied to `.rt-scroll-container`, and `.rt-virtual-pane`\n * is sized to match the estimated \"virtual\" size of the `table`;  estimated,\n * because it's true size can't be known until all columns dimensions are known,\n * which may be deferred in the case of auto-sized tables.\n *\n * Double buffering can be enabled on \"column scroll\", \"row scroll\" and/or\n * \"column schema change\".  When enabled and a redraw is requested for the case,\n * the existing table is cloned with `cloneNode()` and swapped with the real\n * `table`, which is then updated offscreen and swapped back in.  While this is\n * much slower to render, it prevents draw-in.\n *\n * @class RegularVirtualTableViewModel\n */\nexport class RegularVirtualTableViewModel extends HTMLElement {\n    /**\n     * Create the DOM for this `shadowRoot`.\n     *\n     * TODO deprecated\n     * `MATERIAL_STYLE` is needed both here, and in the document `<head>`, due\n     * to double buffering, which may read incorrect position/size values as the\n     * double buffered `<table>` is rendered in the shadow DOM before being\n     * swapped in.\n     *\n     * @internal\n     * @private\n     * @memberof RegularVirtualTableViewModel\n     */\n    create_shadow_dom() {\n        this.attachShadow({ mode: \"open\" });\n        const slot = `<slot></slot>`;\n\n        // nosemgrep\n        this.shadowRoot.innerHTML = html`\n            <style>\n                ${container_css}\n            </style>\n            <style>\n                ${sub_cell_offsets}\n            </style>\n            <div class=\"rt-virtual-panel\"></div>\n            <div class=\"rt-scroll-table-clip\">\n                ${slot}\n            </div>\n        `;\n\n        const [, style, virtual_panel, table_clip] = this.shadowRoot.children;\n        this._sub_cell_style = style;\n        this._table_clip = table_clip;\n        this._virtual_panel = virtual_panel;\n        this._setup_virtual_scroll();\n    }\n\n    _setup_virtual_scroll() {\n        if (this._table_clip) {\n            if (this._virtual_mode === \"both\" || this._virtual_mode === \"vertical\") {\n                this._table_clip.style.top = \"0px\";\n            } else {\n                this._table_clip.style.removeProperty(\"top\");\n            }\n\n            if (this._virtual_mode === \"both\" || this._virtual_mode === \"horizontal\") {\n                this._table_clip.style.left = \"0px\";\n            } else {\n                this._table_clip.style.removeProperty(\"left\");\n            }\n\n            if (this._virtual_mode !== \"both\") {\n                this._table_clip.style.contain = \"none\";\n            } else {\n                this._table_clip.style.removeProperty(\"contain\");\n            }\n        }\n    }\n\n    /**\n     * Calculates the `viewport` argument for perspective's `to_columns` method.\n     *\n     * @internal\n     * @private\n     * @memberof RegularVirtualTableViewModel\n     * @param {*} nrows\n     * @returns\n     */\n    _calculate_viewport(nrows, num_columns) {\n        const { start_row, end_row } = this._calculate_row_range(nrows);\n        const { start_col, end_col } = this._calculate_column_range(num_columns);\n        this._nrows = nrows;\n        return { start_col, end_col, start_row, end_row };\n    }\n\n    /**\n     * Calculate `start_row` and `end_row` for the viewport.  We do this by\n     * first calculating `total_scroll_height`, the px height of the\n     * scrollable page, from the `_virtual_panel.offsetHeight`.\n     *\n     *    0px +------------+-------------+  - virtual_panel.offsetHeight\n     *        |            |  .          |  . 600px\n     *        |  viewport  |  .          |  .\n     *        |            |  .          |  .\n     *  200px +------------+  - height   |  .  - total_scroll_height\n     *        |                 200px    |  .  . 400px\n     *        |                          |  .  .\n     *        |                          |  .  .\n     *        |                          |  .  .\n     *        |                          |  .  .\n     *  600px +--------------------------+  -  -\n     *\n     *  `percent_scroll` can be calculated from this value and `scrollTop`,\n     *  which we can then apply to the new calculated height to preserve scroll\n     *  position when the height has changed since previous render.\n     *\n     *    0px +--------------------------+  -\n     *        |                          |  .\n     *        |                          |  .\n     *        |                          |  . scrollable area\n     *  300px +------------+             |  .\n     *        |            |             |  .\n     *  - - - |  viewport  | - - - - - - |  - total_scroll_height\n     *        |            |             |    400px\n     *  500px +------------+             |\n     *        |                          |\n     *  600px +--------------------------+\n     *\n     * @internal\n     * @private\n     * @memberof RegularVirtualTableViewModel\n     * @param {*} nrows\n     * @returns\n     */\n    _calculate_row_range(nrows) {\n        const { height } = this._container_size;\n        const row_height = this._column_sizes.row_height || 19;\n        const header_levels = this._view_cache.config.column_pivots.length;\n        const total_scroll_height = Math.max(1, this._virtual_panel.offsetHeight - this.clientHeight);\n        const percent_scroll = Math.max(Math.ceil(this.scrollTop), 0) / total_scroll_height;\n        const virtual_panel_row_height = height / row_height - header_levels;\n        const relative_nrows = nrows || 0;\n        const scroll_rows = Math.max(0, Math.ceil(relative_nrows - virtual_panel_row_height));\n        const start_row = scroll_rows * percent_scroll;\n        const end_row = Math.max(0, Math.min(start_row + virtual_panel_row_height, nrows));\n        return { start_row, end_row };\n    }\n\n    _calc_start_column() {\n        const scroll_index_offset = this._view_cache.config.row_pivots.length;\n        let start_col = 0;\n        let offset_width = 0;\n        let diff = 0;\n        while (offset_width < this.scrollLeft) {\n            const new_val = this._column_sizes.indices[start_col + scroll_index_offset];\n            diff = this.scrollLeft - offset_width;\n            start_col += 1;\n            offset_width += new_val !== undefined ? new_val : 60;\n        }\n\n        start_col += diff / (this._column_sizes.indices[start_col + scroll_index_offset - 1] || 60);\n        return Math.max(0, start_col - 1);\n    }\n\n    /**\n     * Calculates `start_col` and `end_col` for the viewport - most of the\n     * details of which are actually calculated in `_max_column`, the equivalent\n     * of `total_scroll_height` from `_calculate_row_range`.\n     *\n     * @internal\n     * @private\n     * @memberof RegularVirtualTableViewModel\n     * @returns\n     */\n    _calculate_column_range(num_columns) {\n        if (this._virtual_mode === \"none\" || this._virtual_mode === \"vertical\") {\n            return { start_col: 0, end_col: Infinity };\n        } else {\n            const start_col = this._calc_start_column();\n            const vis_cols = this.table_model.num_columns() || Math.min(num_columns, Math.ceil(this._container_size.width / 60));\n            let end_col = start_col + vis_cols + 1;\n            return { start_col, end_col };\n        }\n    }\n\n    /**\n     * Calculates the minimum possible starting column index for which the last\n     * column is completely visible (e.g. not occluded by the container clip).\n     * This is assumed to be the # of columns until the column widths are\n     * calculated as they are scrolled into view by the user, which requires\n     * special synchronization with _update_virtual_panel_width`\n     * as the scrollable width will change as the user scrolls left to right.\n     *\n     * Once `_column_sizes.indices` has enough column widths populated from\n     * user scrolling, it calulates the cumulative sum of column widths from\n     * last visible column backwards, until the sum is larger than the viewport\n     * px width, which is 1 below the max scroll column\n     *\n     *               width = 290   = 210     = 100    = 0\n     *   0px               V       V         V        500px\n     *   +-----------------+-------+---------+--------+\n     *   | ..ol B) (Col C) | Col D | Col E   | Col F  |\n     *   |                 | 80px  | 110px   | 100px  |\n     *   |                 |       |         |        |\n     *\n     * @internal\n     * @private\n     * @memberof RegularVirtualTableViewModel\n     * @returns\n     */\n    _max_scroll_column(num_columns) {\n        let width = 0;\n        if (this._view_cache.config.row_pivots.length > 0) {\n            for (const w of this._column_sizes.indices.slice(0, this._view_cache.config.row_pivots.length)) {\n                width += w;\n            }\n        }\n        let scroll_index_offset = this._view_cache.config.row_pivots.length;\n        let max_scroll_column = num_columns;\n        while (width < this._container_size.width && max_scroll_column >= 0) {\n            max_scroll_column--;\n            width += this._column_sizes.indices[max_scroll_column + scroll_index_offset] || 60;\n        }\n\n        return Math.min(num_columns - 1, max_scroll_column + 1);\n    }\n\n    /**\n     * Determines whether the viewport is identical in row and column axes to\n     * the previous viewport rendered, for throttling identical render requests,\n     * e.g. when the logical (row-wise) viewport does not change, but the pixel\n     * viewport has moved a few px.\n     *\n     * @internal\n     * @private\n     * @memberof RegularVirtualTableViewModel\n     * @param {*} {start_col, end_col, start_row, end_row}\n     * @returns\n     */\n    _validate_viewport({ start_col, end_col, start_row, end_row }) {\n        start_row = Math.floor(start_row);\n        end_row = Math.ceil(end_row);\n        start_col = Math.floor(start_col);\n        end_col = Math.ceil(end_col);\n        const invalid_column = this._start_col !== start_col;\n        const invalid_row = this._start_row !== start_row || this._end_row !== end_row || this._end_col !== end_col;\n        this._start_col = start_col;\n        this._end_col = end_col;\n        this._start_row = start_row;\n        this._end_row = end_row;\n        return { invalid_column, invalid_row };\n    }\n\n    _calc_scrollable_column_width(num_columns) {\n        let scroll_index_offset = this._view_cache.config.row_pivots.length;\n        const max_scroll_column = this._max_scroll_column(num_columns);\n        let cidx = scroll_index_offset,\n            virtual_width = 0;\n\n        while (cidx < max_scroll_column + scroll_index_offset) {\n            virtual_width += this._column_sizes.indices[cidx] || 60;\n            cidx++;\n        }\n\n        return virtual_width;\n    }\n\n    /**\n     * Updates the `virtual_panel` width based on view state.\n     *\n     * @internal\n     * @private\n     * @memberof RegularVirtualTableViewModel\n     * @param {*} invalid\n     */\n    _update_virtual_panel_width(invalid, num_columns) {\n        if (invalid) {\n            if (this._virtual_mode === \"vertical\" || this._virtual_mode === \"none\") {\n                this._virtual_panel.style.width = this._column_sizes.indices.reduce((x, y) => x + y, 0) + \"px\";\n            } else {\n                const virtual_width = this._calc_scrollable_column_width(num_columns);\n                if (virtual_width !== 0) {\n                    const panel_width = this._container_size.width + virtual_width + 2;\n                    this._virtual_panel.style.width = panel_width + \"px\";\n                } else {\n                    this._virtual_panel.style.width = \"1px\";\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates the `virtual_panel` height based on the view state.\n     *\n     * @internal\n     * @private\n     * @memberof RegularVirtualTableViewModel\n     * @param {*} nrows\n     */\n    _update_virtual_panel_height(nrows) {\n        const { row_height = 19 } = this._column_sizes;\n        const header_height = this._view_cache.config.column_pivots.length * row_height;\n        let virtual_panel_px_size;\n        if (this._virtual_mode === \"horizontal\" || this._virtual_mode === \"none\") {\n            virtual_panel_px_size = nrows * row_height + header_height;\n        } else {\n            //const {height} = this._container_size;\n            // TODO use cached height?\n            const zoom_factor = this.clientHeight / (this._table_clip.offsetHeight - header_height);\n            virtual_panel_px_size = Math.min(BROWSER_MAX_HEIGHT, nrows * row_height * zoom_factor);\n        }\n        this._virtual_panel.style.height = `${virtual_panel_px_size}px`;\n    }\n\n    /**\n     * Draws this virtual panel, given an object of render options that allow\n     * the implementor to fine tune the individual render frames based on the\n     * interaction and previous render state.\n     *\n     * @public\n     * @memberof RegularVirtualTableViewModel\n     * @param {DrawOptions} [options]\n     * @param {boolean} [options.invalid_viewport=true]\n     * @param {boolean} [options.preserve_width=false]\n     * @param {boolean} [options.throttle=true]\n     */\n    async draw(options = {}) {\n        if (typeof options.throttle !== \"undefined\" && !options.throttle) {\n            return await internal_draw.call(this, options);\n        } else {\n            return await throttle_tag(this, () => internal_draw.call(this, options));\n        }\n    }\n\n    async _draw_flush() {\n        await flush_tag(this);\n    }\n\n    update_sub_cell_offset(viewport) {\n        const y_offset = this._column_sizes.row_height * (viewport.start_row % 1) || 0;\n        const x_offset = this._column_sizes.indices[(this.table_model._row_headers_length || 0) + Math.floor(viewport.start_col)] * (viewport.start_col % 1) || 0;\n        let style = this._sub_cell_style.sheet?.cssRules[0].style;\n        if (style) {\n            style.setProperty(`--regular-table--clip-x`, `${x_offset}px`);\n            style.setProperty(`--regular-table--clip-y`, `${y_offset}px`);\n            style.setProperty(`--regular-table--transform-x`, `-${x_offset}px`);\n            style.setProperty(`--regular-table--transform-y`, `-${y_offset}px`);\n        }\n    }\n}\n\nasync function internal_draw(options) {\n    const __debug_start_time__ = DEBUG && performance.now();\n    const { invalid_viewport = true, preserve_width = false } = options;\n    const { num_columns, num_rows, row_height } = await this._view_cache.view(0, 0, 0, 0);\n    this._container_size = {\n        width: this._virtual_mode === \"none\" || this._virtual_mode === \"vertical\" ? Infinity : this._table_clip.clientWidth,\n        height: this._virtual_mode === \"none\" || this._virtual_mode === \"horizontal\" ? Infinity : this._table_clip.clientHeight,\n    };\n\n    this._update_virtual_panel_height(num_rows);\n    if (!preserve_width) {\n        this._update_virtual_panel_width(invalid_viewport, num_columns);\n    }\n    const viewport = this._calculate_viewport(num_rows, num_columns);\n    const { invalid_row, invalid_column } = this._validate_viewport(viewport);\n    if (this._invalid_schema || invalid_row || invalid_column || invalid_viewport) {\n        let autosize_cells = [],\n            needs_sub_cell_update = true;\n        for await (let last_cells of this.table_model.draw(this._container_size, this._view_cache, this._selected_id, preserve_width, viewport, num_columns)) {\n            if (last_cells !== undefined) {\n                autosize_cells = autosize_cells.concat(last_cells);\n            }\n\n            // We want to perform this before the next event loop so there\n            // is no scroll jitter, but only on the first iteration as\n            // subsequent viewports are incorrect.\n            if (needs_sub_cell_update) {\n                this.update_sub_cell_offset(viewport);\n                needs_sub_cell_update = false;\n            }\n\n            this._is_styling = true;\n            const callbacks = this._style_callbacks;\n            for (const callback of callbacks) {\n                await callback({ detail: this });\n            }\n\n            this._is_styling = false;\n            if (!this._invalidated && last_cells !== undefined) {\n                break;\n            }\n\n            this._invalidated = false;\n        }\n\n        this.table_model.autosize_cells(autosize_cells, row_height);\n        this.table_model.header.reset_header_cache();\n        if (!preserve_width) {\n            this._update_virtual_panel_width(this._invalid_schema || invalid_column, num_columns);\n        }\n        this._invalid_schema = false;\n    } else {\n        this.update_sub_cell_offset(viewport);\n    }\n\n    if (DEBUG) {\n        log_perf(performance.now() - __debug_start_time__);\n    }\n}\n\n/**\n * Options for the draw method.\n *\n * @public\n * @typedef DrawOptions\n * @type {object}\n * @property {boolean} [invalid_viewport]\n * @property {boolean} [preserve_width]\n */\n", "/******************************************************************************\n *\n * Copyright (c) 2020, the Regular Table Authors.\n *\n * This file is part of the Regular Table library, distributed under the terms\n * of the Apache License 2.0.  The full license can be found in the LICENSE\n * file.\n *\n */\n\nimport { METADATA_MAP } from \"./constants\";\nimport { RegularVirtualTableViewModel } from \"./scroll_panel\";\nimport { throttle_tag } from \"./utils\";\n\n/**\n * WHen enabled, override iOS overscroll behavior by emulating scroll position\n * in JavaScript.  This prevents \"bounce\" on edges, but it also removes scroll\n * inertia.  This waspreviously enabled by default in `regular-table<=0.4.3`,\n * but this version also had bugged (exaggerated) position calculation.\n * As `0.5.0` introduces sub-cell scrolling by defualt, this is now disabled by\n * default as well.\n */\nconst IOS_DISABLE_OVERSCROLL = false;\n\n/**\n *\n *\n * @class RegularViewEventModel\n * @extends {RegularVirtualTableViewModel}\n */\nexport class RegularViewEventModel extends RegularVirtualTableViewModel {\n    register_listeners() {\n        // // TODO see `_on_click_or_dblclick` method jsdoc\n        // this.addEventListener(\"dblclick\", this._on_dblclick.bind(this));\n\n        this.addEventListener(\"mousedown\", this._on_click_or_dblclick.bind(this));\n        this.addEventListener(\"scroll\", this._on_scroll.bind(this), {\n            passive: true,\n        });\n\n        this._register_glitch_scroll_listeners();\n    }\n\n    /**\n     *\n     * @internal\n     * @private\n     * @memberof RegularViewEventModel\n     * @returns\n     */\n    async _on_scroll(event) {\n        event.stopPropagation();\n        await this.draw({ invalid_viewport: false });\n        this.dispatchEvent(new CustomEvent(\"regular-table-scroll\"));\n    }\n\n    /**\n     * Modern and mobile browsers implement complex scroll behavior to\n     * implement fancy touch and intertia effects;  these must be intercepted\n     * and disabled to achieve clean virtual scrolling in the presence of a\n     * `fixed` element.\n     *\n     * @internal\n     * @private\n     * @memberof RegularViewEventModel\n     */\n    _register_glitch_scroll_listeners() {\n        this.addEventListener(\"mousewheel\", this._on_mousewheel.bind(this));\n        if (IOS_DISABLE_OVERSCROLL) {\n            this.addEventListener(\"touchmove\", this._on_touchmove.bind(this));\n            this.addEventListener(\"touchstart\", this._on_touchstart.bind(this), {\n                passive: true,\n            });\n        }\n    }\n    /**\n     * Mousewheel must precalculate in addition to `_on_scroll` to prevent\n     * visual artifacts due to scrolling \"inertia\" on modern browsers.\n     *\n     * @internal\n     * @private\n     * @memberof RegularViewEventModel\n     * @param {*} event\n     */\n    _on_mousewheel(event) {\n        if (!window.safari) {\n            // **** Apple\n            return;\n        }\n\n        const { clientWidth, clientHeight, scrollTop, scrollLeft } = this;\n        event.preventDefault();\n        event.returnValue = false;\n        const total_scroll_height = Math.max(1, this._virtual_panel.offsetHeight - clientHeight);\n        const total_scroll_width = Math.max(1, this._virtual_panel.offsetWidth - clientWidth);\n        this.scrollTop = Math.max(0, Math.min(total_scroll_height, scrollTop + event.deltaY));\n        this.scrollLeft = Math.max(0, Math.min(total_scroll_width, scrollLeft + event.deltaX));\n        this._on_scroll(event);\n    }\n\n    /**\n     * Touchmove/touchstart must precalculate in addition to `_on_scroll` to\n     * prevent visual artifacts due to scrolling \"inertia\" on mobile browsers.\n     * This has the unfortunate side-effect of disabling scroll intertia.\n     *\n     * @internal\n     * @private\n     * @memberof RegularViewEventModel\n     * @param {*} event\n     * @returns\n     */\n    _on_touchmove(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        event.returnValue = false;\n        const { clientWidth, clientHeight } = this;\n        const total_scroll_height = Math.max(1, this._virtual_panel.offsetHeight - clientHeight);\n        const total_scroll_width = Math.max(1, this._virtual_panel.offsetWidth - clientWidth);\n        this.scrollTop = Math.min(total_scroll_height, this._memo_scroll_top + (this._memo_touch_startY - event.touches[0].pageY));\n        this.scrollLeft = Math.min(total_scroll_width, this._memo_scroll_left + (this._memo_touch_startX - event.touches[0].pageX));\n        this._on_scroll(event);\n    }\n\n    _on_touchstart(event) {\n        this._memo_touch_startY = event.touches[0].pageY;\n        this._memo_touch_startX = event.touches[0].pageX;\n        this._memo_scroll_top = this.scrollTop;\n        this._memo_scroll_left = this.scrollLeft;\n    }\n\n    /**\n     * Handles double-click header width override reset.\n     *\n     * @internal\n     * @private\n     * @memberof RegularVirtualTableViewModel\n     * @param {*} event\n     * @returns\n     */\n    async _on_dblclick(event) {\n        let element = event.target;\n        while (element.tagName !== \"TD\" && element.tagName !== \"TH\") {\n            element = element.parentElement;\n            if (!this.contains(element)) {\n                return;\n            }\n        }\n\n        const is_resize = event.target.classList.contains(\"rt-column-resize\");\n        const metadata = METADATA_MAP.get(element);\n        if (is_resize) {\n            event.stopImmediatePropagation();\n            // await new Promise(queueMicrotask);\n            element.style.minWidth = \"\";\n            element.style.maxWidth = \"\";\n            if (event.shiftKey) {\n                this._column_sizes.override = [];\n                this._column_sizes.auto = [];\n                this._column_sizes.indices = [];\n            } else {\n                this._column_sizes.override[metadata.size_key] = undefined;\n                this._column_sizes.auto[metadata.size_key] = undefined;\n                this._column_sizes.indices[metadata.size_key] = undefined;\n            }\n\n            for (const row of event.shiftKey ? [this.table_model.header.cells[this.table_model.header.cells.length - 1], ...this.table_model.body.cells] : this.table_model.body.cells) {\n                for (const td of event.shiftKey ? row : [row[metadata._virtual_x]]) {\n                    if (!td) {\n                        continue;\n                    }\n\n                    td.style.minWidth = \"\";\n                    td.style.maxWidth = \"\";\n                    td.classList.remove(\"rt-cell-clip\");\n                }\n            }\n\n            await this.draw();\n        }\n    }\n\n    /**\n     * Dispatches all click events to other handlers, depending on\n     * `event.target`.\n     *\n     * @internal\n     * @private\n     * @memberof RegularVirtualTableViewModel\n     * @param {*} event\n     * @returns\n     */\n    async _on_click(event) {\n        if (event.button !== 0) {\n            return;\n        }\n\n        let element = event.target;\n        while (element.tagName !== \"TD\" && element.tagName !== \"TH\") {\n            element = element.parentElement;\n            if (!this.contains(element)) {\n                return;\n            }\n        }\n\n        const is_resize = event.target.classList.contains(\"rt-column-resize\");\n        const metadata = METADATA_MAP.get(element);\n        if (is_resize) {\n            this._on_resize_column(event, element, metadata);\n            event.stopImmediatePropagation();\n        }\n    }\n\n    /**\n     * `dblclick` event does not work reliably for some reason so dispatch this\n     * event in JavaScript instead.\n     * @param {`*`} event\n     */\n    async _on_click_or_dblclick(event) {\n        const now = performance.now();\n        if (this._last_clicked_time && now - this._last_clicked_time < 500) {\n            this._last_clicked_time = now;\n            await this._on_dblclick(event);\n        } else {\n            this._last_clicked_time = now;\n            await this._on_click(event);\n        }\n    }\n\n    /**\n     * Regular event for column resize.\n     *\n     * @internal\n     * @private\n     * @memberof RegularVirtualTableViewModel\n     * @param {*} event\n     * @param {*} element\n     * @param {*} metadata\n     */\n    _on_resize_column(event, element, metadata) {\n        const { _virtual_x, size_key } = metadata;\n        const start = event.pageX;\n        const header_x = _virtual_x + element.colSpan - 1;\n        const header_element = this.table_model.header.get_column_header(header_x);\n        const width = this._column_sizes.indices[size_key];\n        const move = (event) => throttle_tag(this, async () => await this._on_resize_column_move(event, header_element, start, width, size_key, header_x));\n        const up = () => {\n            document.removeEventListener(\"mousemove\", move);\n            document.removeEventListener(\"mouseup\", up);\n            const override_width = this._column_sizes.override[size_key];\n            const should_redraw = this._column_sizes.indices[size_key] !== override_width;\n            this._column_sizes.indices[size_key] = override_width;\n            if (should_redraw) {\n                this.draw();\n            }\n        };\n\n        document.addEventListener(\"mousemove\", move);\n        document.addEventListener(\"mouseup\", up);\n    }\n\n    /**\n     * Regular event for mouse movement when resizing a column.\n     *\n     * @internal\n     * @private\n     * @memberof RegularVirtualTableViewModel\n     * @param {*} event\n     * @param {*} th\n     * @param {*} start\n     * @param {*} width\n     * @param {*} metadata\n     */\n    async _on_resize_column_move(event, th, start, width, size_key, virtual_x) {\n        await new Promise(requestAnimationFrame);\n        const diff = event.pageX - start;\n        const override_width = Math.max(1, width + diff);\n        this._column_sizes.override[size_key] = override_width;\n\n        // If the column is smaller, new columns may need to be fetched, so\n        // redraw, else just update the DOM widths as if redrawn.\n        if (diff < 0) {\n            await this.draw({ preserve_width: true, throttle: false });\n        } else {\n            th.style.minWidth = override_width + \"px\";\n            th.style.maxWidth = override_width + \"px\";\n            const auto_width = this._column_sizes.auto[size_key];\n            for (const row of this.table_model.body.cells) {\n                const td = row[virtual_x];\n                if (td) {\n                    td.style.maxWidth = td.style.minWidth = override_width + \"px\";\n                    td.classList.toggle(\"rt-cell-clip\", auto_width > override_width);\n                }\n            }\n        }\n    }\n}\n", "/******************************************************************************\n *\n * Copyright (c) 2020, the Regular Table Authors.\n *\n * This file is part of the Regular Table library, distributed under the terms\n * of the Apache License 2.0.  The full license can be found in the LICENSE\n * file.\n *\n */\n\nimport { METADATA_MAP } from \"./constants\";\n\n/******************************************************************************\n *\n * View Model\n *\n */\n\nclass ElemFactory {\n    constructor(name) {\n        this._name = name;\n        this._elements = [];\n        this._index = 0;\n    }\n\n    reset() {\n        this._index = 0;\n    }\n\n    get() {\n        if (!this._elements[this._index]) {\n            this._elements[this._index] = document.createElement(this._name);\n        }\n\n        const elem = this._elements[this._index];\n        this._index += 1;\n        return elem;\n    }\n}\n\nexport class ViewModel {\n    constructor(column_sizes, container, table) {\n        this._column_sizes = column_sizes;\n        this._container = container;\n        this._span_factory = new ElemFactory(\"span\");\n        this.table = table;\n        this.cells = [];\n        this.rows = [];\n    }\n\n    num_columns() {\n        return this._get_row(Math.max(0, this.rows.length - 1)).row_container.length;\n    }\n\n    num_rows() {\n        return this.cells.length;\n    }\n\n    _set_metadata(td, metadata) {\n        METADATA_MAP.set(td, metadata);\n    }\n\n    _get_or_create_metadata(td) {\n        if (td === undefined) {\n            return {};\n        } else if (METADATA_MAP.has(td)) {\n            return METADATA_MAP.get(td);\n        } else {\n            const metadata = {};\n            METADATA_MAP.set(td, metadata);\n            return metadata;\n        }\n    }\n\n    _replace_cell(ridx, cidx) {\n        const { tr, row_container } = this._get_row(ridx);\n        let td = row_container[cidx];\n        if (td) {\n            tr.removeChild(td);\n            row_container.splice(cidx, 1, undefined);\n        }\n        return td;\n    }\n\n    _fetch_cell(ridx, cidx) {\n        if (ridx < 0 || cidx < 0) {\n            return;\n        }\n\n        return this.cells[ridx]?.[cidx];\n    }\n\n    _get_row(ridx) {\n        let tr = this.rows[ridx];\n        if (!tr) {\n            tr = this.rows[ridx] = document.createElement(\"tr\");\n            this.table.appendChild(tr);\n        }\n\n        let row_container = this.cells[ridx];\n        if (!row_container) {\n            row_container = this.cells[ridx] = [];\n        }\n\n        return { tr, row_container };\n    }\n\n    _get_cell(tag = \"TD\", ridx, cidx) {\n        const { tr, row_container } = this._get_row(ridx);\n        let td = row_container[cidx];\n        if (!td) {\n            if (cidx < row_container.length) {\n                td = row_container[cidx] = document.createElement(tag);\n                tr.insertBefore(\n                    td,\n                    row_container.slice(cidx + 1).find((x) => x)\n                );\n            } else {\n                td = row_container[cidx] = document.createElement(tag);\n                tr.appendChild(td);\n            }\n        }\n        if (td.tagName !== tag) {\n            const new_td = document.createElement(tag);\n            tr.replaceChild(new_td, td);\n            this.cells[ridx].splice(cidx, 1, new_td);\n            td = new_td;\n        }\n        return td;\n    }\n\n    _clean_columns(cidx) {\n        for (let i = 0; i < this.rows.length; i++) {\n            const tr = this.rows[i];\n            const row_container = this.cells[i];\n            this.cells[i] = row_container.slice(0, cidx[i] || cidx);\n            const idx = this.cells[i].filter((x) => x !== undefined).length;\n            while (tr.children[idx]) {\n                tr.removeChild(tr.children[idx]);\n            }\n        }\n    }\n\n    _clean_rows(ridx) {\n        while (this.table.children[ridx]) {\n            this.table.removeChild(this.table.children[ridx]);\n        }\n        this.rows = this.rows.slice(0, ridx);\n        this.cells = this.cells.slice(0, ridx);\n    }\n}\n", "/******************************************************************************\n *\n * Copyright (c) 2020, the Regular Table Authors.\n *\n * This file is part of the Regular Table library, distributed under the terms\n * of the Apache License 2.0.  The full license can be found in the LICENSE\n * file.\n *\n */\n\nimport { ViewModel } from \"./view_model\";\n\n/**\n * <thead> view model.  This model accumulates state in the form of\n * column_sizes, which leverages <tables> autosize behavior across\n * virtual pages.\n *\n * @class RegularHeaderViewModel\n */\nexport class RegularHeaderViewModel extends ViewModel {\n    constructor(...args) {\n        super(...args);\n        this._group_header_cache = [];\n        this._offset_cache = [];\n    }\n\n    _draw_group_th(offset_cache, d, column) {\n        const th = this._get_cell(\"TH\", d, offset_cache[d] || 0);\n        offset_cache[d] += 1;\n        th.removeAttribute(\"colspan\");\n        th.style.minWidth = \"0\";\n\n        th.textContent = \"\";\n        if (column instanceof HTMLElement) {\n            th.appendChild(column);\n        } else {\n            const span = this._span_factory.get(\"span\");\n            span.textContent = column;\n            th.appendChild(span);\n        }\n\n        const resizeSpan = this._span_factory.get(\"span\");\n        resizeSpan.className = \"rt-column-resize\";\n        th.appendChild(resizeSpan);\n\n        return th;\n    }\n\n    _draw_group(column, column_name, th) {\n        const metadata = this._get_or_create_metadata(th);\n        metadata.column_header = column;\n        metadata.value = column_name;\n        metadata.value = column_name;\n        return metadata;\n    }\n\n    _draw_th(column, column_name, th, cidx, size_key) {\n        const metadata = this._get_or_create_metadata(th);\n        metadata.column_header = column;\n        metadata.value = column_name;\n        metadata.size_key = size_key.length ? size_key[0] : size_key; // FIXME\n\n        if (!(size_key.length > 1)) {\n            const override_width = this._column_sizes.override[metadata.size_key];\n            const auto_width = this._column_sizes.auto[metadata.size_key];\n            if (override_width) {\n                th.classList.toggle(\"rt-cell-clip\", auto_width > override_width);\n                th.style.minWidth = override_width + \"px\";\n                th.style.maxWidth = override_width + \"px\";\n            } else if (auto_width) {\n                th.classList.remove(\"rt-cell-clip\");\n                th.style.maxWidth = \"\";\n                th.style.minWidth = auto_width + \"px\";\n            } else {\n                th.style.maxWidth = \"\";\n                th.style.maxWidth = \"\";\n            }\n        }\n\n        return metadata;\n    }\n\n    get_column_header(cidx) {\n        return this._get_cell(\"TH\", this.num_rows() - 1, cidx);\n    }\n\n    draw(alias, parts, colspan, x, size_key, x0, _virtual_x, column_header_merge_depth, merge_headers) {\n        const header_levels = parts?.length; //config.column_pivots.length + 1;\n        if (header_levels === 0) return;\n        let th, metadata, column_name;\n        let output = undefined;\n        column_header_merge_depth = typeof column_header_merge_depth === \"undefined\" ? header_levels - 1 : column_header_merge_depth;\n        for (let d = 0; d < header_levels; d++) {\n            column_name = parts[d] ? parts[d] : \"\";\n            this._offset_cache[d] = this._offset_cache[d] || 0;\n\n            if (d < column_header_merge_depth) {\n                if (merge_headers && this._group_header_cache?.[d]?.[0]?.value === column_name) {\n                    th = this._group_header_cache[d][1];\n                    this._group_header_cache[d][2] += 1;\n                    if (colspan === 1) {\n                        this._group_header_cache[d][0].row_header_x = size_key;\n                    }\n                    th.setAttribute(\"colspan\", this._group_header_cache[d][2]);\n                } else {\n                    th = this._draw_group_th(this._offset_cache, d, column_name);\n                    metadata = this._draw_group(parts, column_name, th);\n                    this._group_header_cache[d] = [metadata, th, 1];\n                }\n            } else {\n                th = this._draw_group_th(this._offset_cache, d, column_name);\n\n                // Update the group header's metadata such that each group\n                // header has the same metadata coordinates of its rightmost\n                // column.\n                metadata = this._draw_th(alias || parts, column_name, th, x, size_key);\n                if (typeof output === \"undefined\") {\n                    output = { th, metadata };\n                }\n\n                for (const [group_meta] of this._group_header_cache) {\n                    group_meta.size_key = metadata.size_key;\n                }\n                th.removeAttribute(\"colspan\");\n            }\n\n            this._get_row(d).tr.classList.toggle(\"rt-autosize\", d === column_header_merge_depth);\n            th.classList.toggle(\"rt-group-corner\", x === undefined);\n            if (metadata) {\n                metadata.x = typeof x === \"undefined\" ? x : Math.floor(x);\n                metadata.column_header_y = d;\n                metadata.x0 = Math.floor(x0);\n                metadata._virtual_x = _virtual_x;\n                if (colspan === 1) {\n                    metadata.row_header_x = size_key;\n                }\n            }\n        }\n\n        this._clean_rows(this._offset_cache.length);\n        output = output || { th, metadata };\n        return output;\n    }\n\n    clean() {\n        this._clean_columns(this._offset_cache);\n    }\n\n    reset_header_cache() {\n        this._offset_cache = [];\n        this._group_header_cache = [];\n    }\n}\n", "/******************************************************************************\n *\n * Copyright (c) 2020, the Regular Table Authors.\n *\n * This file is part of the Regular Table library, distributed under the terms\n * of the Apache License 2.0.  The full license can be found in the LICENSE\n * file.\n *\n */\n\nimport { ViewModel } from \"./view_model\";\n\n/**\n * <tbody> view model.\n *\n * @class RegularBodyViewModel\n */\nexport class RegularBodyViewModel extends ViewModel {\n    _draw_td(tagName, ridx, val, cidx, { column_name }, { ridx_offset }, size_key) {\n        const td = this._get_cell(tagName, ridx, cidx);\n        const metadata = this._get_or_create_metadata(td);\n        metadata.y = ridx + Math.floor(ridx_offset);\n        metadata.size_key = size_key;\n        if (tagName === \"TD\") {\n            metadata.column_header = column_name;\n        }\n        const override_width = this._column_sizes.override[metadata.size_key];\n        if (override_width) {\n            const auto_width = this._column_sizes.auto[metadata.size_key];\n            td.classList.toggle(\"rt-cell-clip\", auto_width > override_width);\n            td.style.minWidth = override_width + \"px\";\n            td.style.maxWidth = override_width + \"px\";\n        } else {\n            td.classList.remove(\"rt-cell-clip\");\n            td.style.minWidth = \"\";\n            td.style.maxWidth = \"\";\n        }\n\n        if (metadata.value !== val) {\n            if (val instanceof HTMLElement) {\n                td.textContent = \"\";\n                td.appendChild(val);\n            } else {\n                td.textContent = val;\n            }\n        }\n\n        metadata.value = val;\n        return { td, metadata };\n    }\n\n    draw(container_height, column_state, view_state, th = false, x, x0, size_key, merge_headers) {\n        const { cidx, column_data, row_headers, column_data_listener_metadata } = column_state;\n        let { row_height } = view_state;\n        let metadata;\n        const ridx_offset = [],\n            tds = [];\n        let ridx = 0;\n        const cidx_offset = [];\n        for (let i = 0; i < (th ? view_state.row_headers_length : 1); i++) {\n            ridx = 0;\n\n            for (const val of column_data) {\n                const id = row_headers?.[ridx];\n                let obj;\n                if (th) {\n                    const row_header = val[i];\n                    const prev_row = this._fetch_cell(ridx - (ridx_offset[i] || 1), cidx + i);\n                    const prev_row_metadata = this._get_or_create_metadata(prev_row);\n\n                    const prev_col = this._fetch_cell(ridx, cidx + i - (cidx_offset[ridx] || 1));\n                    const prev_col_metadata = this._get_or_create_metadata(prev_col);\n\n                    if (merge_headers && prev_col && (prev_col_metadata.value === row_header || row_header === undefined) && !prev_col.hasAttribute(\"rowspan\")) {\n                        cidx_offset[ridx] = cidx_offset[ridx] ? cidx_offset[ridx] + 1 : 2;\n                        prev_col.setAttribute(\"colspan\", cidx_offset[ridx]);\n                        this._replace_cell(ridx, cidx + i);\n                    } else if (merge_headers && prev_row && prev_row_metadata.value === row_header && !prev_row.hasAttribute(\"colspan\")) {\n                        ridx_offset[i] = ridx_offset[i] ? ridx_offset[i] + 1 : 2;\n                        prev_row.setAttribute(\"rowspan\", ridx_offset[i]);\n                        this._replace_cell(ridx, cidx + i);\n                    } else {\n                        obj = this._draw_td(\"TH\", ridx, row_header, cidx + i, column_state, view_state, i);\n                        obj.td.style.display = \"\";\n                        obj.td.removeAttribute(\"rowspan\");\n                        obj.td.removeAttribute(\"colspan\");\n                        obj.metadata.row_header = val;\n                        obj.metadata.row_header_x = i;\n                        obj.metadata.y0 = Math.floor(view_state.ridx_offset);\n                        obj.metadata.y1 = Math.ceil(view_state.y1);\n                        obj.metadata._virtual_x = i;\n                        if (typeof x0 !== \"undefined\") {\n                            obj.metadata.x0 = Math.floor(x0);\n                        }\n                        ridx_offset[i] = 1;\n                        cidx_offset[ridx] = 1;\n                        tds[i] = obj;\n                    }\n                } else {\n                    obj = this._draw_td(\"TD\", ridx, val, cidx, column_state, view_state, size_key);\n                    if (column_data_listener_metadata) {\n                        obj.metadata.user = column_data_listener_metadata[ridx];\n                    }\n\n                    obj.metadata.x = typeof x === \"undefined\" ? x : Math.floor(x);\n                    obj.metadata.x1 = Math.ceil(view_state.x1);\n                    obj.metadata.row_header = id || [];\n                    obj.metadata.y0 = Math.floor(view_state.ridx_offset);\n                    obj.metadata.y1 = Math.ceil(view_state.y1);\n                    obj.metadata.dx = Math.floor(x - x0);\n                    obj.metadata.dy = obj.metadata.y - Math.floor(obj.metadata.y0);\n                    obj.metadata._virtual_x = cidx;\n                    if (typeof x0 !== \"undefined\") {\n                        obj.metadata.x0 = Math.floor(x0);\n                    }\n\n                    tds[0] = obj;\n                }\n\n                ridx++;\n                metadata = obj ? obj.metadata : metadata;\n                row_height = row_height || obj?.td.offsetHeight;\n                if (ridx * row_height > container_height) {\n                    break;\n                }\n            }\n        }\n        this._clean_rows(ridx);\n        return { tds, ridx, metadata, row_height };\n    }\n\n    clean({ ridx, cidx }) {\n        this._clean_rows(ridx);\n        this._clean_columns(cidx);\n    }\n}\n", "/******************************************************************************\n *\n * Copyright (c) 2020, the Regular Table Authors.\n *\n * This file is part of the Regular Table library, distributed under the terms\n * of the Apache License 2.0.  The full license can be found in the LICENSE\n * file.\n *\n */\n\nimport { RegularHeaderViewModel } from \"./thead\";\nimport { RegularBodyViewModel } from \"./tbody\";\nimport { html } from \"./utils\";\n\n/**\n * <table> view model.  In order to handle unknown column width when `draw()`\n * is called, this model will iteratively fetch more data to fill in columns\n * until the page is complete, and makes some column viewport estimations\n * when this information is not availble.\n *\n * @class RegularTableViewModel\n */\nexport class RegularTableViewModel {\n    constructor(table_clip, column_sizes, element) {\n        this.clear(element);\n        const [table] = element.children;\n        const [thead, tbody] = table.children;\n        this.table = table;\n        this._column_sizes = column_sizes;\n        this.header = new RegularHeaderViewModel(column_sizes, table_clip, thead);\n        this.body = new RegularBodyViewModel(column_sizes, table_clip, tbody);\n        this.fragment = document.createDocumentFragment();\n    }\n\n    num_columns() {\n        return this.header.num_columns();\n    }\n\n    clear(element) {\n        // nosemgrep\n        element.innerHTML = html`\n            <table cellspacing=\"0\">\n                <thead></thead>\n                <tbody></tbody>\n            </table>\n        `;\n    }\n\n    /**\n     * Calculate amendments to auto size from this render pass.\n     *\n     * @param {*} last_cells\n     * @param {*} {columns, column_pivots}\n     * @memberof RegularTableViewModel\n     */\n    autosize_cells(last_cells, override_row_height) {\n        while (last_cells.length > 0) {\n            const [cell, metadata] = last_cells.pop();\n            const box = cell.getBoundingClientRect();\n            this._column_sizes.row_height = override_row_height || Math.max(10, Math.min(this._column_sizes.row_height || box.height, box.height));\n            this._column_sizes.indices[metadata.size_key] = box.width;\n            const is_override = this._column_sizes.override[metadata.size_key] !== undefined;\n            if (box.width && !is_override) {\n                this._column_sizes.auto[metadata.size_key] = box.width;\n            }\n\n            if (cell.style.minWidth === \"0px\") {\n                cell.style.minWidth = `${box.width}px`;\n            }\n        }\n    }\n\n    async *draw(container_size, view_cache, selected_id, preserve_width, viewport, num_columns) {\n        const { width: container_width, height: container_height } = container_size;\n        const { view, config } = view_cache;\n        let { data, row_headers, column_headers, metadata: data_listener_metadata, column_header_merge_depth, merge_headers = \"both\" } = await view(\n            Math.floor(viewport.start_col),\n            Math.floor(viewport.start_row),\n            Math.ceil(viewport.end_col),\n            Math.ceil(viewport.end_row)\n        );\n\n        const merge_row_headers = merge_headers === \"both\" || merge_headers === \"row\";\n        const merge_column_headers = merge_headers === \"both\" || merge_headers === \"column\";\n\n        const { start_row: ridx_offset = 0, start_col: x0 = 0, end_col: x1 = 0, end_row: y1 = 0 } = viewport;\n\n        // pad row_headers for embedded renderer\n        // TODO maybe dont need this - perspective compat\n        if (row_headers) {\n            this._row_headers_length = row_headers.reduce((max, x) => Math.max(max, x.length), 0);\n            row_headers = row_headers.map((x) => {\n                x.length = this._row_headers_length;\n                return x;\n            });\n        }\n\n        view_cache.config.column_pivots = Array.from(Array(column_headers?.[0]?.length || 0).keys());\n        view_cache.config.row_pivots = Array.from(Array(row_headers?.[0]?.length || 0).keys());\n        const sub_cell_offset = this._column_sizes.indices[(this._row_headers_length || 0) + Math.floor(viewport.start_col)] || 0;\n\n        const view_state = {\n            viewport_width: 0,\n            selected_id,\n            ridx_offset,\n            sub_cell_offset,\n            x0: x0,\n            x1: x1,\n            y1: y1,\n            row_height: this._column_sizes.row_height,\n            row_headers_length: this._row_headers_length,\n        };\n\n        let cont_body,\n            _virtual_x = 0,\n            last_cells = [],\n            first_col = true;\n        if (row_headers?.length > 0) {\n            const column_name = config.row_pivots.join(\",\");\n\n            const column_state = {\n                column_name,\n                cidx: 0,\n                column_data: row_headers,\n                row_headers,\n                first_col,\n            };\n            const size_key = _virtual_x + Math.floor(x0);\n            cont_body = this.body.draw(container_height, column_state, { ...view_state, x0: 0 }, true, undefined, undefined, size_key, merge_row_headers);\n            const cont_heads = [];\n            for (let i = 0; i < view_cache.config.row_pivots.length; i++) {\n                const header = this.header.draw(column_name, Array(view_cache.config.column_pivots.length).fill(\"\"), 1, undefined, i, x0, i, column_header_merge_depth, merge_column_headers);\n                if (!!header) {\n                    cont_heads.push(header);\n                }\n            }\n            first_col = false;\n            view_state.viewport_width += cont_heads.reduce((total, { th }, i) => total + (this._column_sizes.indices[i] || th.offsetWidth), 0);\n            view_state.row_height = view_state.row_height || cont_body.row_height;\n            _virtual_x = row_headers[0].length;\n            if (!preserve_width) {\n                for (let i = 0; i < view_cache.config.row_pivots.length; i++) {\n                    const { td, metadata } = cont_body.tds[i] || {};\n                    const { th, metadata: hmetadata } = cont_heads[i] || {};\n                    if (!!td || !!th) {\n                        last_cells.push([th || td, hmetadata || metadata]);\n                    }\n                }\n            }\n        }\n\n        try {\n            let dcidx = 0;\n            const num_visible_columns = num_columns - viewport.start_col;\n            while (dcidx < num_visible_columns) {\n                // If there is no column for this data, our pre-fetch viewport\n                // estimate was wrong and we'll need to do a mid-render fetch\n                // to get more data.\n                if (!data[dcidx]) {\n                    let missing_cidx = Math.max(viewport.end_col, 0);\n                    viewport.start_col = missing_cidx;\n\n                    // Calculate a new data window width based on how large the\n                    // columns drawn so far take up.  This can either be\n                    // summed if we've drawn/measured these columns before,\n                    // or estimated by avg if the missing columns have never\n                    // been seen by the renderer.\n                    let end_col_offset = 0,\n                        size_extension = 0;\n                    while (this._column_sizes.indices.length > _virtual_x + x0 + end_col_offset + 1 && size_extension + view_state.viewport_width < container_width) {\n                        end_col_offset++;\n                        size_extension += this._column_sizes.indices[_virtual_x + x0 + end_col_offset];\n                    }\n\n                    if (size_extension + view_state.viewport_width < container_width) {\n                        const estimate = Math.min(num_columns, missing_cidx + 5); //Math.ceil(((dcidx + end_col_offset) * container_width) / (view_state.viewport_width + size_extension) + 1);\n                        viewport.end_col = Math.max(1, Math.min(num_columns, estimate));\n                    } else {\n                        viewport.end_col = Math.max(1, Math.min(num_columns, missing_cidx + end_col_offset));\n                    }\n\n                    // Fetch the new data window extension and append it to the\n                    // cached data page and continue.\n                    const new_col_req = view(Math.floor(viewport.start_col), Math.floor(viewport.start_row), Math.ceil(viewport.end_col), Math.ceil(viewport.end_row));\n                    yield undefined;\n                    const new_col = await new_col_req;\n\n                    if (typeof new_col.column_header_merge_depth !== \"undefined\") {\n                        column_header_merge_depth = new_col.column_header_merge_depth;\n                    }\n\n                    if (typeof new_col.merge_headers !== \"undefined\") {\n                        merge_headers = new_col.merge_headers;\n                    }\n\n                    if (new_col.data.length === 0) {\n                        // The viewport is size 0, first the estimate, then the\n                        // first-pass render, so really actually abort now.\n                        yield last_cells;\n                        return;\n                    }\n\n                    viewport.end_col = viewport.start_col + new_col.data.length;\n                    for (let i = 0; i < new_col.data.length; i++) {\n                        data[dcidx + i] = new_col.data[i];\n                        if (new_col.metadata) {\n                            data_listener_metadata[dcidx + i] = new_col.metadata[i];\n                        }\n\n                        if (column_headers) {\n                            column_headers[dcidx + i] = new_col.column_headers?.[i];\n                        }\n                    }\n                }\n\n                const column_name = column_headers?.[dcidx] || \"\";\n                const column_data = data[dcidx];\n                const column_data_listener_metadata = data_listener_metadata?.[dcidx];\n                const column_state = {\n                    column_name,\n                    cidx: _virtual_x,\n                    column_data,\n                    column_data_listener_metadata,\n                    row_headers,\n                    first_col,\n                };\n\n                const x = dcidx + x0;\n                const size_key = _virtual_x + Math.floor(x0);\n                const cont_head = this.header.draw(undefined, column_name, undefined, x, size_key, x0, _virtual_x, column_header_merge_depth, merge_column_headers);\n                cont_body = this.body.draw(container_height, column_state, view_state, false, x, x0, size_key, merge_row_headers);\n                first_col = false;\n                if (!preserve_width) {\n                    for (const { td, metadata } of cont_body.tds) {\n                        last_cells.push([cont_head?.th || td, cont_head?.metadata || metadata]);\n                    }\n                }\n\n                const last_measured_col_width = this._column_sizes.indices[_virtual_x + Math.floor(x0)];\n                if (last_measured_col_width) {\n                    view_state.viewport_width += last_measured_col_width;\n                } else {\n                    // This is probably wrong since the column has yet to be\n                    // styled, but we'll use it as an estimate and recalc after.\n                    view_state.viewport_width += cont_head?.th?.offsetWidth || cont_body.tds.reduce((x, y) => x + y.td?.offsetWidth, 0);\n                }\n\n                view_state.row_height = view_state.row_height || cont_body.row_height;\n                _virtual_x++;\n                dcidx++;\n\n                if (view_state.viewport_width - view_state.sub_cell_offset > container_width) {\n                    this.body.clean({\n                        ridx: cont_body?.ridx || 0,\n                        cidx: _virtual_x,\n                    });\n                    this.header.clean();\n                    yield last_cells;\n\n                    // If we make it here, this draw() call was invalidated by\n                    // a call to `invalidate()` within a `StyleListener`, so\n                    // recalculate the cumulative width and keep drawing if\n                    // necessary.  Note `last_cells` is a list of 2-tuples but\n                    // we only bind the first var because _eslint_.\n                    view_state.viewport_width = 0;\n                    for (let [td] of last_cells) {\n                        view_state.viewport_width += td.offsetWidth;\n                    }\n\n                    // If there are still enough columns to fill the screen,\n                    // completely end the iteration here, otherwise\n                    // continue iterating to draw another column.\n                    if (view_state.viewport_width - view_state.sub_cell_offset > container_width) {\n                        return;\n                    }\n                }\n            }\n            this.body.clean({ ridx: cont_body?.ridx || 0, cidx: _virtual_x });\n            this.header.clean();\n            yield last_cells;\n        } finally {\n            this.body.clean({ ridx: cont_body?.ridx || 0, cidx: _virtual_x });\n            this.header.clean();\n            this.body._span_factory.reset();\n            this.header._span_factory.reset();\n        }\n    }\n}\n", "/******************************************************************************\n *\n * Copyright (c) 2020, the Regular Table Authors.\n *\n * This file is part of the Regular Table library, distributed under the terms\n * of the Apache License 2.0.  The full license can be found in the LICENSE\n * file.\n *\n */\n\nimport { METADATA_MAP } from \"./constants\";\nimport { RegularViewEventModel } from \"./events\";\nimport { RegularTableViewModel } from \"./table\";\nimport { get_draw_fps } from \"./utils\";\n\nconst VIRTUAL_MODES = [\"both\", \"horizontal\", \"vertical\", \"none\"];\n\n/**\n * The `<regular-table>` custom element.\n *\n * This module has no exports, but importing it has a side effect: the\n * `RegularTableElement` class is registered as a custom element, after which\n * it can be used as a standard DOM element.\n *\n * The documentation in this module defines the instance structure of a\n * `<regular-table>` DOM object instantiated typically, through HTML or any\n * relevent DOM method e.g. `document.createElement(\"perspective-viewer\")` or\n * `document.getElementsByTagName(\"perspective-viewer\")`.\n *\n * @public\n * @extends HTMLElement\n */\nclass RegularTableElement extends RegularViewEventModel {\n    constructor() {\n        super();\n        /** @private */\n        this._column_sizes = { auto: [], override: [], indices: [] };\n        /** @private */\n        this._style_callbacks = [];\n        /** @private */\n        this._initialized = false;\n    }\n\n    /* eslint-disable */\n    /**\n     * For internal use by the Custom Elements API: \"Invoked each time the\n     * custom element is appended into a document-connected element\".\n     * Ref: https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks\n     *\n     * @internal\n     * @private\n     * @memberof RegularTableElement\n     */\n    /* eslint-enable */\n    connectedCallback() {\n        if (!this._initialized) {\n            this.create_shadow_dom();\n            this.register_listeners();\n            this.setAttribute(\"tabindex\", \"0\");\n\n            this._initialized = true;\n            this.table_model = new RegularTableViewModel(this._table_clip, this._column_sizes, this);\n        }\n    }\n\n    /**\n     * Reset the viewport of this regular table.\n     *\n     * @internal\n     * @private\n     * @memberof RegularTableElement\n     */\n    _reset_viewport() {\n        /** @private @type {number} */\n        this._start_row = undefined;\n        /** @private @type {number} */\n        this._end_row = undefined;\n        /** @private @type {number} */\n        this._start_col = undefined;\n        /** @private @type {number} */\n        this._end_col = undefined;\n    }\n\n    /**\n     * Reset the scroll position of this regular table back to the origin.\n     *\n     * @internal\n     * @private\n     * @memberof RegularTableElement\n     */\n    _reset_scroll() {\n        this._column_sizes.indices = [];\n        this.scrollTop = 0;\n        this.scrollLeft = 0;\n        this._reset_viewport();\n    }\n\n    /**\n     * Reset column autosizing, such that column sizes will be recalculated\n     * on the next draw() call.\n     *\n     * @internal\n     * @protected\n     * @memberof RegularTableElement\n     */\n    _resetAutoSize() {\n        this._column_sizes.auto = [];\n        this._column_sizes.override = [];\n        this._column_sizes.indices = [];\n\n        for (let i = 0; i < this.table_model.header.num_columns(); i++) {\n            const th = this.table_model.header.get_column_header(i);\n            th.style.minWidth = \"\";\n            th.style.maxWidth = \"\";\n        }\n    }\n\n    /**\n     * Clears the current renderer `<table>`.\n     *\n     * @public\n     * @memberof RegularTableElement\n     */\n    clear() {\n        this.table_model = new RegularTableViewModel(this._table_clip, this._column_sizes, this);\n    }\n\n    /**\n     * Adds a style listener callback. The style listeners are called\n     * whenever the <table> is re-rendered, such as through API invocations\n     * of draw() and user-initiated events such as scrolling. Within this\n     * optionally async callback, you can select <td>, <th>, etc. elements\n     * via regular DOM API methods like querySelectorAll().\n     *\n     * Example:\n     * const unsubscribe = table.addStyleListener(() => {\n     *     for (const td of table.querySelectorAll(\"td\")) {\n     *         td.setAttribute(\"contenteditable\", true);\n     *     }\n     * });\n     *\n     * setTimeout(() => {\n     *     unsubscribe();\n     * }, 1000);\n     * @public\n     * @memberof RegularTableElement\n     * @param {function({detail: RegularTableElement}): void} styleListener - A\n     * (possibly async) function that styles the inner <table>.\n     * @returns {function(): void} A function to remove this style listener.\n     */\n    addStyleListener(styleListener) {\n        this._style_callbacks = this._style_callbacks.concat(styleListener);\n\n        let isSubscribed = true;\n\n        const unsubscribe = () => {\n            if (!isSubscribed) {\n                return;\n            }\n            isSubscribed = false;\n\n            const callbacks = (this._style_callbacks = this._style_callbacks.slice());\n            const index = callbacks.indexOf(styleListener);\n            callbacks.splice(index, 1);\n        };\n        return unsubscribe;\n    }\n\n    /**\n     * When called within the execution scope of a function registered to this\n     * `<regular-table>` as a `StyleListener`, invalidate this draw's\n     * dimensions and attempt to draw more columns.  Useful if your\n     * `StyleListener` changes a cells dimensions, otherwise `<regular-table>`\n     * may not draw enough columns to fill the screen.\n     *\n     * @public\n     * @memberof RegularTableElement\n     */\n    invalidate() {\n        if (!this._is_styling) {\n            throw new Error(\"Cannot call `invalidate()` outside of a `StyleListener`\");\n        }\n        /** @private */\n        this._invalidated = true;\n    }\n\n    /**\n     * Returns the `MetaData` object associated with a `<td>` or `<th>`.  When\n     * your `StyleListener` is invoked, use this method to look up additional\n     * `MetaData` about any `HTMLTableCellElement` in the rendered `<table>`.\n     *\n     * Example:\n     * const elems = document.querySelector(\"td:last-child td:last_child\");\n     * const metadata = table.getMeta(elems);\n     * console.log(`Viewport corner is ${metadata.x}, ${metadata.y}`);\n     *\n     * const header = table.getMeta({row_header_x: 1, y: 3}).row_header;\n     * @public\n     * @memberof RegularTableElement\n     * @param {HTMLTableCellElement|Partial<MetaData>} element - The child\n     * element of this `<regular-table>` for which to look up metadata, or a\n     * coordinates-like object to refer to metadata by logical position.\n     * @returns {MetaData} The metadata associated with the element.\n     */\n    getMeta(element) {\n        if (typeof element === \"undefined\") {\n            return;\n        } else if (element instanceof HTMLElement) {\n            return METADATA_MAP.get(element);\n        } else if (element.row_header_x >= 0) {\n            if (element.row_header_x < this._view_cache.config.row_pivots.length) {\n                const td = this.table_model.body._fetch_cell(element.y, element.row_header_x);\n                return this.getMeta(td);\n            }\n        } else if (element.column_header_y >= 0) {\n            if (element.column_header_y < this._view_cache.config.column_pivots.length) {\n                const td = this.table_model.body._fetch_cell(element.column_header_y, element.y);\n                return this.getMeta(td);\n            }\n        } else {\n            return this.getMeta(this.table_model.body._fetch_cell(element.dy, element.dx + this.table_model._row_headers_length));\n        }\n    }\n\n    /**\n     * Get performance statistics about this `<regular-table>`.  Calling this\n     * method resets the internal state, which makes it convenient to measure\n     * performance at regular intervals (see example).\n     *\n     * Example:\n     * const table = document.getElementById(\"my_regular_table\");\n     * setInterval(() => {\n     *     const {real_fps} = table.getDrawFPS();\n     *     console.log(`Measured ${fps} fps`)\n     * });\n     * @public\n     * @memberof RegularTableElement\n     * @returns {Performance} Performance data aggregated since the last\n     * call to `getDrawFPS()`.\n     */\n    getDrawFPS() {\n        return get_draw_fps();\n    }\n\n    /**\n     * Call this method to set the `scrollLeft` and `scrollTop` for this\n     * `<regular-table>` by calculating the position of this `scrollLeft`\n     * and `scrollTop` relative to the underlying widths of its columns\n     * and heights of its rows.\n     *\n     * Example:\n     * table.scrollToCell(1, 3, 10, 30);\n     * @public\n     * @memberof RegularTableElement\n     * @param {number} x - The left most `x` index column to scroll into view.\n     * @param {number} y - The top most `y` index row to scroll into view.\n     */\n    async scrollToCell(x, y) {\n        if (!this._view_cache) {\n            console.warn(\"data listener not configured\");\n            return;\n        }\n\n        const viewport_row_height = this._column_sizes.row_height || 19;\n        const header_height = this._view_cache.config.column_pivots.length * viewport_row_height;\n        const body_height = this._table_clip.offsetHeight - header_height;\n        const row_height_offset = body_height % viewport_row_height;\n        let real_row_height = (this._virtual_panel.offsetHeight - row_height_offset) / this._nrows;\n        this.scrollTop = Math.ceil(real_row_height * y);\n\n        let scroll_left = 0;\n        while (x > 0) {\n            x--;\n            scroll_left += this._column_sizes.indices[x + this._view_cache.config.row_pivots.length] || 60;\n        }\n\n        this.scrollLeft = Math.ceil(scroll_left);\n        await new Promise(requestAnimationFrame);\n        await this._draw_flush();\n    }\n\n    /**\n     * Call this method to set `DataListener` for this `<regular-table>`,\n     * which will be called whenever a new data slice is needed to render.\n     * Calls to `draw()` will fail if no `DataListener` has been set\n     *\n     * Example:\n     * table.setDataListener((x0, y0, x1, y1) => {\n     *     return {\n     *         num_rows: num_rows = DATA[0].length,\n     *         num_columns: DATA.length,\n     *         data: DATA.slice(x0, x1).map(col => col.slice(y0, y1))\n     *     };\n     * })\n     * @public\n     * @memberof RegularTableElement\n     * @param {DataListener} dataListener\n     * `dataListener` is called by to request a rectangular section of data\n     * for a virtual viewport, (x0, y0, x1, y1), and returns a `DataReponse`\n     * object.\n     * @param {Object} options\n     * @param {(\"both\"|\"horizontal\"|\"vertical\"|\"none\")} options.virtual_mode\n     * The `virtual_mode` options flag may be one of \"both\", \"horizontal\",\n     * \"vertical\", or \"none\" indicating which dimensions of the table should be\n     * virtualized (vs. rendering completely).\n     */\n    setDataListener(dataListener, { virtual_mode = \"both\" } = {}) {\n        let schema = {};\n        let config = {\n            row_pivots: [],\n            column_pivots: [],\n        };\n\n        console.assert(VIRTUAL_MODES.indexOf(virtual_mode) > -1, `Unknown virtual_mode ${virtual_mode};  valid options are \"both\" (default), \"horizontal\", \"vertical\" or \"none\"`);\n        /** @private */\n        this._virtual_mode = virtual_mode;\n        /** @private */\n        this._invalid_schema = true;\n        /** @private */\n        this._view_cache = { view: dataListener, config, schema };\n        this._setup_virtual_scroll();\n    }\n\n    /**\n     * This func only exists to provide hints to doc compulation tools.\n     * Should never be run, and even if it is the body of the func will\n     * never execute.\n     *\n     * @internal\n     * @private\n     * @memberof RegularTableElement\n     */\n    __noop_jsdoc_hints() {\n        if (false) {\n            /**\n             * Draws this virtual panel, given an object of render options that\n             * allow the implementor to fine tune the individual render frames\n             * based on the interaction and previous render state.\n             *\n             * @public\n             * @type {(opt?: DrawOptions) => void}\n             * @memberof RegularTableElement\n             * */\n            this.draw = null;\n        }\n    }\n}\n\nif (document.createElement(\"regular-table\").constructor === HTMLElement) {\n    window.customElements.define(\"regular-table\", RegularTableElement);\n}\n\n/**\n * An object with performance statistics about calls to\n * `draw()` from some time interval (captured in milliseconds by the\n * `elapsed` proprty).\n *\n * @public\n * @typedef Performance\n * @type {object}\n * @property {number} avg - Avergage milliseconds per call.\n * @property {number} real_fps - `num_frames` / `elapsed`\n * @property {number} virtual_fps - `elapsed` / `avg`\n * @property {number} num_frames - Number of frames rendered.\n * @property {number} elapsed - Number of milliseconds since last call\n * to `getDrawFPS()`.\n */\n\n/**\n * An object describing virtual rendering metadata about an\n * `HTMLTableCellElement`, use this object to map rendered `<th>` or `<td>`\n * elements back to your `data`, `row_headers` or `column_headers` within\n * listener functions for `addStyleListener()` and `addEventListener()`.\n *\n * Example:\n *\n * MetaData                     (x = 0, column_header_y = 0))\n *                              *-------------------------------------+\n *                              |                                     |\n *                              |                                     |\n *                              +-------------------------------------+\n * (row_header_x = 0, y = 0)    (x = 0, y = 0)\n * *------------------------+   *-------------------------------------+\n * |                        |   |                                     |\n * |                        |   |      (x0, y0)                       |\n * |                        |   |      *---------------*              |\n * |                        |   |      |               |              |\n * |                        |   |      |     * (x, y)  |              |\n * |                        |   |      |               |              |\n * |                        |   |      *---------------* (x1, y1)     |\n * |                        |   |                                     |\n * +------------------------+   +-------------------------------------+\n *\n * @public\n * @typedef MetaData\n * @type {object}\n * @property {number} [x] - The `x` index in your virtual data model.\n * property is only generated for `<td>`, `<th>` from `row_headers`.\n * @property {number} [y] - The `y` index in your virtual data model.\n * property is only generated for `<td>`, `<th>` from `row_headers`.\n * @property {number} [x0] - The `x` index of the viewport origin in\n * your data model, e.g. what was passed to `x0` when your\n * `dataListener` was invoked.\n * @property {number} [y0] - The `y` index of the viewport origin in\n * your data model, e.g. what was passed to `y0` when your\n * `dataListener` was invoked.\n * @property {number} [x1] - The `x` index of the viewport corner in\n * your data model, e.g. what was passed to `x1` when your\n * `dataListener` was invoked.\n * @property {number} [y1] - The `y` index of the viewport corner in\n * your data model, e.g. what was passed to `y1` when your\n * `dataListener` was invoked.\n * @property {number} [dx] - The `x` index in `DataResponse.data`, this\n * property is only generated for `<td>`, and `<th>` from `column_headers`.\n * @property {number} [dy] - The `y` index in `DataResponse.data`, this\n * property is only generated for `<td>`, `<th>` from `row_headers`.\n * @property {number} [column_header_y] - The `y` index in\n * `DataResponse.column_headers[x]`, this property is only generated for `<th>`\n * from `column_headers`.\n * @property {number} [row_header_x] - The `x` index in\n * `DataResponse.row_headers[y]`, this property is only generated for `<th>`\n * from `row_headers`.\n * @property {number} size_key - The unique index of this column in a full\n * `<table>`, which is `x` + (Total Row Header Columns).\n * @property {(string|HTMLElement)[]} [row_header] - The `Array` for this `y` in\n * `DataResponse.row_headers`, if it was provided.\n * @property {(string|HTMLElement)[]} [column_header] - The `Array` for this `x`\n * in `DataResponse.column_headers`, if it was provided.\n * @property {(string|HTMLElement)} [value] - The value dispalyed in the cell or\n * header.\n */\n\n/**\n * The `DataResponse` object describes a rectangular region of a virtual\n * data set, and some associated metadata.  `<regular-table>` will use this\n * object to render the `<table>`, though it may make multiple requests for\n * different regions to achieve a compelte render as it must estimate\n * certain dimensions.  You must construct a `DataResponse` object to\n * implement a `DataListener`.\n *\n * Example:\n * {\n *     \"num_rows\": 26,\n *     \"num_columns\": 3,\n *     \"data\": [\n *         [0, 1],\n *         [\"A\", \"B\"]\n *     ],\n *     \"row_headers\": [\n *         [\"Rowgroup 1\", \"Row 1\"],\n *         [\"Rowgroup 1\", \"Row 2\"]\n *     ],\n *     \"column_headers\": [\n *         [\"Colgroup 1\", \"Column 1\"],\n *         [\"Colgroup 1\", \"Column 2\"]\n *     ]\n * }\n * @public\n * @typedef DataResponse\n * @type {object}\n * @property {(string|HTMLElement)[][]} [column_headers] - A two dimensional\n * `Array` of column group headers, in specificity order.  No `<thead>`\n * will be generated if this property is not provided.\n * @property {(string|HTMLElement)[][]} [row_headers] - A two dimensional\n * `Array` of row group headers, in specificity order.  No `<th>`\n * elements within `<tbody>` will be generated if this property is not\n * provided.\n * @property {(string|HTMLElement)[][]} data - A two dimensional `Array`\n * representing a rectangular section of the underlying data set from\n * (x0, y0) to (x1, y1), arranged in columnar fashion such that\n * `data[x][y]` returns the `y`th row of the `x`th column of the slice.\n * @property {number} num_rows - Total number of rows in the underlying\n * data set.\n * @property {number} num_columns - Total number of columns in the\n * underlying data set.\n */\n\n/**\n * The `DataListener` is similar to a normal event listener function.\n * Unlike a normal event listener, it takes regular arguments (not an\n * `Event`); and returns a `Promise` for a `DataResponse` object for this\n * region (as opposed to returning `void` as a standard event listener).\n *\n * @public\n * @callback DataListener\n * @param {number} x0 - The origin `x` index (column).\n * @param {number} y0 - The origin `y` index (row).\n * @param {number} x1 - The corner `x` index (column).\n * @param {number} y1 - The corner `y` index (row).\n * @returns {Promise<DataResponse>} The resulting `DataResponse`.  Make sure\n * to `resolve` or `reject` the `Promise`, or your `<regular-table>` will\n * never render!\n */\n\n/**\n * Options for the draw method.\n *\n * @public\n * @typedef DrawOptions\n * @type {object}\n * @property {boolean} [invalid_viewport]\n * @property {boolean} [preserve_width]\n */\n\n/**\n * Public summary of table_model type.\n *\n * @public\n * @typedef TableModel\n * @type {object}\n * @property {ViewModel} header\n * @property {ViewModel} body\n * @property {() => number} num_columns\n */\n\n/**\n * Public summary of table_model.header and table_model.body base type.\n *\n * @public\n * @typedef ViewModel\n * @type {object}\n * @property {any} table\n * @property {any[]} cells\n * @property {any[]} rows\n * @property {() => number} num_columns\n * @property {() => number} num_rows\n */\n"],
  "mappings": "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",
  "names": ["METADATA_MAP", "DEBUG", "isFirefox", "BROWSER_MAX_HEIGHT", "AVG", "TOTAL", "START", "get_draw_fps", "now", "elapsed", "avg", "real_fps", "virtual_fps", "num_frames", "log_perf", "x", "html", "strings", "args", "str", "a", "invertPromise", "_resolve", "promise", "resolve", "TAGS", "flush_tag", "tag", "throttle_tag", "f", "l", "RegularVirtualTableViewModel", "slot", "html", "container_default", "sub_cell_offsets_default", "style", "virtual_panel", "table_clip", "nrows", "num_columns", "start_row", "end_row", "start_col", "end_col", "height", "row_height", "header_levels", "total_scroll_height", "percent_scroll", "virtual_panel_row_height", "scroll_index_offset", "offset_width", "diff", "new_val", "vis_cols", "width", "w", "max_scroll_column", "invalid_column", "invalid_row", "cidx", "virtual_width", "invalid", "x", "y", "panel_width", "header_height", "virtual_panel_px_size", "zoom_factor", "BROWSER_MAX_HEIGHT", "options", "internal_draw", "throttle_tag", "flush_tag", "viewport", "y_offset", "x_offset", "__debug_start_time__", "DEBUG", "invalid_viewport", "preserve_width", "num_rows", "autosize_cells", "needs_sub_cell_update", "last_cells", "callbacks", "callback", "log_perf", "IOS_DISABLE_OVERSCROLL", "RegularViewEventModel", "RegularVirtualTableViewModel", "event", "clientWidth", "clientHeight", "scrollTop", "scrollLeft", "total_scroll_height", "total_scroll_width", "element", "is_resize", "metadata", "METADATA_MAP", "row", "td", "now", "_virtual_x", "size_key", "start", "header_x", "header_element", "width", "move", "throttle_tag", "up", "override_width", "should_redraw", "th", "virtual_x", "diff", "auto_width", "ElemFactory", "name", "elem", "ViewModel", "column_sizes", "container", "table", "td", "metadata", "METADATA_MAP", "ridx", "cidx", "tr", "row_container", "tag", "x", "new_td", "i", "idx", "RegularHeaderViewModel", "ViewModel", "args", "offset_cache", "d", "column", "th", "span", "resizeSpan", "column_name", "metadata", "cidx", "size_key", "override_width", "auto_width", "alias", "parts", "colspan", "x", "x0", "_virtual_x", "column_header_merge_depth", "merge_headers", "header_levels", "output", "group_meta", "RegularBodyViewModel", "ViewModel", "tagName", "ridx", "val", "cidx", "column_name", "ridx_offset", "size_key", "td", "metadata", "override_width", "auto_width", "container_height", "column_state", "view_state", "th", "x", "x0", "merge_headers", "column_data", "row_headers", "column_data_listener_metadata", "row_height", "tds", "cidx_offset", "i", "id", "obj", "row_header", "prev_row", "prev_row_metadata", "prev_col", "prev_col_metadata", "RegularTableViewModel", "table_clip", "column_sizes", "element", "table", "thead", "tbody", "RegularHeaderViewModel", "RegularBodyViewModel", "html", "last_cells", "override_row_height", "cell", "metadata", "box", "is_override", "container_size", "view_cache", "selected_id", "preserve_width", "viewport", "num_columns", "container_width", "container_height", "view", "config", "data", "row_headers", "column_headers", "data_listener_metadata", "column_header_merge_depth", "merge_headers", "merge_row_headers", "merge_column_headers", "ridx_offset", "x0", "x1", "y1", "max", "x", "sub_cell_offset", "view_state", "cont_body", "_virtual_x", "first_col", "column_name", "column_state", "size_key", "cont_heads", "i", "header", "total", "th", "td", "hmetadata", "dcidx", "num_visible_columns", "missing_cidx", "end_col_offset", "size_extension", "estimate", "new_col_req", "new_col", "column_data", "column_data_listener_metadata", "cont_head", "last_measured_col_width", "y", "VIRTUAL_MODES", "RegularTableElement", "RegularViewEventModel", "RegularTableViewModel", "i", "th", "styleListener", "isSubscribed", "callbacks", "index", "element", "METADATA_MAP", "td", "get_draw_fps", "x", "y", "viewport_row_height", "header_height", "row_height_offset", "real_row_height", "scroll_left", "dataListener", "virtual_mode", "schema", "config"]
}
