{"version":3,"sources":["file_browser.md"],"names":[],"mappings":"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","sourcesContent":["## File Browser Example\n\nA simple file browser example built with [`regular-table`](https://github.com/finos/regular-table). Also a great introduction to `row_headers`, and how to use them to achieve group-like and tree-like\nbehavior. For this example, we'll want the latter.\n\n```html\n<regular-table id=\"regularTable\"></regular-table>\n```\n\n## Tree-like `row_headers`\n\n`regular-table` will merge consecutive `<th>` defined in `row_headers` with the same content, but it will prefer `rowspan` to `colspan`, inserting empty `<th>` when necessary to fill-in gaps, since\n`table-cell` elements cannot overlap. Knowing this, it is easy to fine-tune header structure and behavior with empty cells. In this case, we want to modify the basic _group-like_ `row_headers` layout\nto support _tree-like_ asymmetric groups. Typically, when representing groups of rows via `row_headers`, for example a file structure like so:\n\n* Dir_1\n  * Dir_2\n    * File_1\n  * File_2\n\n... one may think to implement a `regular-table` Virtual Data Model using a `row_headers` parameter like this:\n\n```json\n[[\"Dir_1\"], [\"Dir_1\", \"Dir_2\"], [\"Dir_1\", \"Dir_2\", \"File_1\"], [\"Dir_1\", \"File_2\"]]\n```\n\nThis will render _group-like_ row headers, with the consecutive `\"Dir_1\"` and `\"Dir_2\"` elements merged via `rowspan`. The resulting headers visually indicate all content on the right-hand side belong\nto the directory. This is exactly what column headers do, but it is not very like a file-tree; each directory \"level\" will determine its respective column's minimum width, and deeply assymmetric trees\nwill yield wide row headers.\n\n<table>\n<tbody>\n<tr><th rowspan=\"4\">Dir_1</th><th colspan=\"2\">-</th></tr>\n<tr><th rowspan=\"2\">Dir_2</th><th>-</th></tr>\n<tr><th>File_1</th></tr>\n<tr><th colspan=\"2\">File_2</th></tr>\n</tbody>\n</table>\n\nGroup-like row headers are nice for always keeping the entire directory path in view regardless of scroll position, but for a more tree-like like experience, we can instead replace the consecutive\nduplicates with `\"\"`.\n\n```json\n[[\"Dir_1\"], [\"\", \"Dir_2\"], [\"\", \"\", \"File_1\"], [\"\", \"File_2\"]]\n```\n\nThe new consecutive `\"\"` will still merge via `rowspan`, excluding the first row, but `regular-table` will detect that a `<th>` lacks a `rowspan`, and instead merge trailing `undefined`/empty values\nvia `colspan` to produce one long `<th>` for each row header group, as in the HTML below. In this tree-like layout, no content will exclusively occupy any but the last column of `row_headers`, and\nthese empty columns can then be sized via CSS to create trees of any geometry, where e.g. \"directory\" group rows overlap the columns of their children as-in a conventional file tree.\n\n<table>\n<tbody>\n<tr><th colspan=\"3\">Dir_1</th></tr>\n<tr><th rowspan=\"3\">-</th><th colspan=\"2\">Dir_2</th></tr>\n<tr><th>-</th><th>File_1</th></tr>\n<tr><th colspan=\"2\">File_2</th></tr>\n</tbody>\n</table>\n\nDespite this long-winded explanation, the implementation in Javascript is fairly straightforward, and for our purposes, we only need create one such path for `row_headers` at a time.\n\n```javascript\nfunction new_path(n, name) {\n    return Array(n).fill(\"\").concat([name]);\n}\n```\n\n## File System\n\nWe can use a regular 2D Array, row oriented, for the file system listing state itself, including file metadata like `size` and the open/closed state of directory rows.\n\n```javascript\nconst COLUMNS = [[\"size\"], [\"kind\"], [\"modified\"], [\"writable\"]];\nconst DATA = Array.from(generateDirContents());\n```\n\nThese file-metadata rows are fake, but for the purposes of an example, they are worth putting \"B Movie\"-level effort into making look like a \"real\" file system.\n\n```javascript\nfunction new_row(type) {\n    const scale = Math.random() > 0.5 ? \"kb\" : \"mb\";\n    const size = numberFormat(Math.pow(Math.random(), 2) * 1000);\n    const date = dateFormat(new Date());\n    return [`${size} ${scale}`, type, date, true];\n}\n```\n\nFor the fake file system contents themselves, we will generate directory contents on the fly as directories are opened and closed by the user.\n\n```javascript\nfunction* generateDirContents(n = 0) {\n    for (let i = 0; i < 5; i++) {\n        yield {\n            path: new_path(n, `Dir_${i}`),\n            row: new_row(\"directory\"),\n            is_open: false,\n        };\n    }\n    for (let i = 0; i < 5; i++) {\n        yield {\n            path: new_path(n, `File_${i}`),\n            row: new_row(\"file\"),\n        };\n    }\n}\n```\n\nOpen and close directory operations are applied via `DATA.splice()`, mutating the `Array` reference directly and inserting or stripping elements as needed.\n\n```javascript\nfunction closeDir(y) {\n    const path = DATA[y].path;\n    while (y + 2 < DATA.length && DATA[y + 1].path.length > path.length) {\n        DATA.splice(y + 1, 1);\n    }\n}\n\nfunction openDir(y) {\n    const new_contents = generateDirContents(DATA[y].path.length);\n    DATA.splice(y + 1, 0, ...Array.from(new_contents));\n}\n\nfunction toggleDir(y) {\n    const { is_open } = DATA[y];\n    if (is_open) {\n        closeDir(y);\n    } else {\n        openDir(y);\n    }\n\n    DATA[y].is_open = !is_open;\n}\n```\n\n## Virtual Data Model\n\n`DATA` needs to be _transposed_ before we can return slices of it from our `dataListener()` function, because it is row-oriented and `regular-table` expects column-oriented data.\n\n```javascript\nfunction transpose(m) {\n    return m.length === 0 ? [] : m[0].map((x, i) => m.map((x) => x[i]));\n}\n```\n\nOtherwise, this `dataListener()` is very similar to `2d_array.md`.\n\n```javascript\nfunction dataListener(x0, y0, x1, y1) {\n    return {\n        num_rows: DATA.length,\n        num_columns: DATA[0].row.length,\n        row_headers: DATA.slice(y0, y1).map((z) => z.path.slice()),\n        column_headers: COLUMNS.slice(x0, x1),\n        data: transpose(DATA.slice(y0, y1).map(({ row }) => row.slice(x0, x1))),\n    };\n}\n```\n\n## Custom Style\n\nDirectory and file icon styles applied as classes, using `getMeta()`, every `td` is mapped back to it's row in `DATA`.\n\n```javascript\nfunction styleListener() {\n    for (const td of window.regularTable.querySelectorAll(\"tbody th\")) {\n        const { y, value } = window.regularTable.getMeta(td);\n        const { row, is_open } = DATA[y];\n        const [, type] = row;\n        td.classList.toggle(\"fb-directory\", !!value && type === \"directory\");\n        td.classList.toggle(\"fb-file\", !!value && type === \"file\");\n        td.classList.toggle(\"fb-open\", !!value && is_open);\n    }\n}\n```\n\n## UI\n\nWhen directory rows are clicked, generate new directory contents at the `td` metadata's `y` coordinate in `DATA` and redraw.\n\n```javascript\n// TODO `resetAutoSize()` is not documented - this is currently required to\n// prevent the column size scroll memoize functionality from pinning the sizes\n// of the 'blank' cells, as these columns may be re-purposed as the user expands\n// or collapses the tree.  But auto-sizing is not well formalized feature yet\n// and this API is just a stand-in.\n\nfunction mousedownListener() {\n    if (event.target.tagName === \"TH\") {\n        const meta = regularTable.getMeta(event.target);\n        if (DATA[meta.y].row[1] === \"directory\") {\n            toggleDir(meta.y);\n            regularTable._resetAutoSize();\n            regularTable.draw();\n        }\n    }\n}\n```\n\n## Main\n\n```javascript\nexport function init() {\n    regularTable.setDataListener(dataListener);\n    regularTable.addStyleListener(styleListener);\n    regularTable.addEventListener(\"mousedown\", mousedownListener);\n    regularTable.addEventListener(\"scroll\", () => {\n        regularTable._resetAutoSize();\n    });\n    regularTable.draw();\n}\n```\n\n```html\n<script type=\"module\">\n    import { init } from \"/dist/examples/file_browser.js\";\n    window.addEventListener(\"load\", () => init());\n</script>\n```\n\n## CSS\n\nIcons\n\n```css\ntbody th.fb-directory:before {\n    font-family: \"Material Icons\";\n    content: \"folder \";\n}\ntbody th.fb-directory.fb-open:before {\n    content: \"folder_open \";\n}\ntbody th.fb-file:before {\n    font-family: \"Material Icons\";\n    content: \"text_snippet \";\n}\n```\n\nBasic theme\n\n```css\ntable thead,\ntable tbody {\n    user-select: none;\n}\ntd:first-of-type,\nhead th {\n    text-align: right;\n}\n```\n\nSet dimensions of \"tree\" structure.\n\n```css\ntbody th:empty {\n    min-width: 20px;\n    max-width: 20px;\n}\n```\n\n## Appendix (Utilities)\n\n```javascript\nfunction numberFormat(x) {\n    const formatter = new Intl.NumberFormat(\"en-us\", {\n        style: \"decimal\",\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2,\n    });\n    return formatter.format(x);\n}\n\nfunction dateFormat(x) {\n    const formatter = new Intl.DateTimeFormat(\"en-us\", {\n        week: \"numeric\",\n        year: \"numeric\",\n        month: \"numeric\",\n        day: \"numeric\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n        second: \"numeric\",\n    });\n    return formatter.format(x);\n}\n```\n\n## Appendix (Dependencies)\n\n```html\n<script src=\"/dist/esm/regular-table.js\"></script>\n<link rel=\"stylesheet\" href=\"/dist/css/material.css\" />\n```\n\n```block\nlicense: apache-2.0\n```\n\n"]}