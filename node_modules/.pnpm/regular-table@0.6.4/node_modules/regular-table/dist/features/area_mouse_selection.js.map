{"version":3,"sources":["area_mouse_selection.md"],"names":[],"mappings":"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","sourcesContent":["# Rectangular Area Selection\n\nMouse area selection is a complex feature composed of a few events interacting with some shared state. As users, we expect to left click a cell, hold the mouse button down, move the mouse to another\ncell and then release, resulting in a table showing the selected region. In order to record the selected area, we will need the location of the cell when the `\"mousedown\"` event is triggered and the\nlocation of the cell on `\"mouseup\"` which we will add as a coordinate pair.\n\nBy holding the `ctrlKey` or `metaKey` while making selections, our users can make multiple selections show at once. Lets also add a `\"mouseover\"` `EventListener` to paint the selection as the user\nmoves the mouse - showing the region that would be selected on `\"mouseup\"`. Finally, we'll need to ensure that the selection paints correctly as it scrolls in and out of the visible table using a\n`StyleListener` that we will define later.\n\n# API\n\n```html\n<regular-table id=\"example_table\"></regular-table>\n```\n\nWe can load default selections to this example and wire up the `DataListener` borrowed from `two_billion_rows`, and then we simply `addAreaMouseSelection()` to the `table` and `draw()`.\n\n```html\n<script type=\"module\">\n    import { addAreaMouseSelection } from \"./area_mouse_selection.js\";\n    import { dataListener } from \"/dist/examples/two_billion_rows.js\";\n\n    window.addEventListener(\"load\", () => {\n        example_table.setDataListener(dataListener(1000, 50));\n        addAreaMouseSelection(example_table, {\n            selected: [\n                { x0: 5, x1: 7, y0: 7, y1: 11 },\n                { x0: 1, x1: 3, y0: 16, y1: 22 },\n                { x0: 7, x1: 8, y0: 15, y1: 18 },\n            ],\n        });\n        example_table.draw();\n    });\n</script>\n```\n\n## `addAreaMouseSelection()`\n\nLets start by making the area selection behavior available via a single function, `addAreaMouseSelection()`, that takes a `<regular-table>` and applies our behavior.\n\n```javascript\nconst PRIVATE = Symbol(\"Area Mouse Selection\");\nconst MOUSE_SELECTED_AREA_CLASS = \"mouse-selected-area\";\n\nexport const addAreaMouseSelection = (table, { className = MOUSE_SELECTED_AREA_CLASS, selected = [] } = {}) => {\n    table[PRIVATE] = { selected_areas: selected };\n    table.addEventListener(\"mousedown\", getMousedownListener(table));\n    table.addEventListener(\"mouseover\", getMouseoverListener(table, className));\n    table.addEventListener(\"mouseup\", getMouseupListener(table, className));\n    table.addStyleListener(() => applyMouseAreaSelections(table, className));\n    return table;\n};\n```\n\n## Listening to Mouse Events\n\nFor each of our mouse listeners, we'll need the `table` passed in from `addAreaMouseSelection()`, so we will define each as a higher-order function creating a closure and keeping the `table` argument\navailable. First we can create a `\"mousedown\"` `EventListener` by calling `getMousedownListener()` with the table. The listener function `return`ed will look up the coordinates of the `event.target`\nusing `getMeta()` and update the `CURRENT_MOUSEDOWN_COORDINATES`. It's also responsible for clearing the previous `selected_areas` if the user isn't holding the `ctrl` or `metaKey`.\n\n```javascript\nconst getMousedownListener = (table) => (event) => {\n    table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES = {};\n    const meta = table.getMeta(event.target);\n    if (meta && meta.x !== undefined && meta.y !== undefined) {\n        table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES = { x: meta.x, y: meta.y };\n    }\n\n    if (!event.ctrlKey && !event.metaKey) {\n        table[PRIVATE].selected_areas = [];\n    }\n};\n```\n\nThe `EventListener` returned for `\"mouseover\"` first checks that a valid `CURRENT_MOUSEDOWN_COORDINATES` is set and then reapplies the cell selection with the `event.target`'s coordinates used to\ncalculate the `potentialSelection`.\n\n```javascript\nconst getMouseoverListener = (table, className) => (event) => {\n    if (table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES && table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES.x !== undefined) {\n        const meta = table.getMeta(event.target);\n        if (meta && meta.x !== undefined && meta.y !== undefined) {\n            const potentialSelection = {\n                x0: Math.min(meta.x, table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES.x),\n                x1: Math.max(meta.x, table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES.x),\n                y0: Math.min(meta.y, table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES.y),\n                y1: Math.max(meta.y, table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES.y),\n            };\n            applyMouseAreaSelections(table, className, table[PRIVATE].selected_areas.concat([potentialSelection]));\n        }\n    }\n};\n```\n\nSimilarly, on `\"mouseup\"` we will need to capture the coordinates of the `event.target` and `push()` this new selection into `selected_areas`. With our `selected_areas` up to date, we will reapply the\nselection then clear the `CURRENT_MOUSEDOWN_COORDINATES`.\n\n```javascript\nconst getMouseupListener = (table, className) => (event) => {\n    const meta = table.getMeta(event.target);\n    if (table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES && table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES.x !== undefined && meta.x !== undefined && meta.y !== undefined) {\n        const selection = {\n            x0: Math.min(meta.x, table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES.x),\n            x1: Math.max(meta.x, table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES.x),\n            y0: Math.min(meta.y, table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES.y),\n            y1: Math.max(meta.y, table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES.y),\n        };\n        table[PRIVATE].selected_areas.push(selection);\n        applyMouseAreaSelections(table, className);\n    }\n    table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES = {};\n};\n```\n\nOur `applyMouseAreaSelections()` will simply `remove()` the `className` from all `td`s in the `table` and then iterate over the `areaSelections` reapplying the `className`.\n\n```javascript\nexport const applyMouseAreaSelections = (table, className, selected) => {\n    const tds = table.querySelectorAll(\"tbody td\");\n    for (const td of tds) {\n        td.classList.remove(className);\n    }\n    selected = selected || table[PRIVATE].selected_areas;\n    for (const as of selected) {\n        applyMouseAreaSelection(table, as, className);\n    }\n};\n```\n\nMuch like our `MetaData` `object`, we will use `x0` and `y0` to describe the upper left corner and `x1` and `y1` for the lower right corner in the body of `applyMouseAreaSelection()`. We can iterate\nthrough the `td`s in the `table` adding the `className` if the `td`'s metadata falls within the rectangular region defined by those coordinates.\n\n```javascript\nconst applyMouseAreaSelection = (table, { x0, x1, y0, y1 }, className) => {\n    const tds = table.querySelectorAll(\"tbody td\");\n    if (x0 !== undefined && y0 !== undefined && x1 !== undefined && y1 !== undefined) {\n        for (const td of tds) {\n            const meta = table.getMeta(td);\n            if (x0 <= meta.x && meta.x <= x1) {\n                if (y0 <= meta.y && meta.y <= y1) {\n                    td.classList.add(className);\n                }\n            }\n        }\n    }\n};\n```\n\n## Styling\n\nBy default the `user-select` style is applied, lets get rid of it for our `td`s.\n\n```css\nregular-table tbody tr td {\n    user-select: none;\n}\n```\n\nAnd we'll need to style the selection to make it look nice for the end user.\n\n```css\nregular-table tbody tr td.mouse-selected-area {\n    background-color: #2771a8;\n    color: white;\n}\n```\n\n## Appendix (Dependencies)\n\n```html\n<script src=\"/dist/esm/regular-table.js\"></script>\n<link rel=\"stylesheet\" href=\"/dist/css/material.css\" />\n```\n\n```block\nlicense: apache-2.0\n```\n\n"]}