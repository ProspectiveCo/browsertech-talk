const FIXED_COLUMN_WIDTH_CLASS = "fixed-column-width";

const fixColumnWidths = (table, isFixed) => {
  function clear(cell) {
    cell.classList.remove(FIXED_COLUMN_WIDTH_CLASS);
    cell.style.minWidth = "";
  }

  function styleListener() {
    table.invalidate();
    const ths = table.querySelectorAll("thead th");
    const tds = table.querySelectorAll("tbody td");

    for (const cell of [...ths, ...tds]) {
      clear(cell);

      if (isFixed(table, cell)) {
        cell.classList.add(FIXED_COLUMN_WIDTH_CLASS);
      }
    }
  }

  table.addStyleListener(styleListener);
  return table;
};

function isFixed(table, cell) {
  const value = table.getMeta(cell).value;
  return value.includes("Fixed");
}

class DataModel {
  constructor(columnCount, cellCount) {
    this._baseColumns = ["Fixed", "Not Set"];
    this._columnCount = columnCount;
    this._cellCount = cellCount;
    this._dataset = this._createDataset();
    this.columns = this._createColumns();
    this._data = this.columns.map(({
      key
    }) => this._dataset[key]);
    this._columnHeaders = this.columns.map(({
      value
    }) => [value]);

    this.dataListener = (x0, y0, x1, y1) => {
      const data = this._data.slice(x0, x1).map(col => col.slice(y0, y1));

      const column_headers = this._columnHeaders.slice(x0, x1);

      const num_columns = this._data.length;
      const num_rows = this._data[0].length;
      return {
        num_rows,
        num_columns,
        column_headers,
        data
      };
    };
  }

  _createTextCells(text) {
    return Array.from(Array(this._cellCount).keys()).map(idx => `${text} ${idx}`);
  }

  _createColumns() {
    return Array.from(Array(this._columnCount)).map((_, idx) => {
      const key = this._baseColumns[idx % this._baseColumns.length];
      return {
        key,
        value: `${key} Column ${idx}`
      };
    });
  }

  _createDataset() {
    return this._baseColumns.reduce((prev, curr) => ({ ...prev,
      [curr]: this._createTextCells(curr)
    }), {});
  }

}

function init() {
  const table = window.fixedColumnWidthsRegularTable;

  if (table) {
    const dataModel = new DataModel(20, 1000);
    table.setDataListener(dataModel.dataListener);
    fixColumnWidths(table, isFixed).draw();
  }
}

window.addEventListener("load", () => init());
//# sourceMappingURL=fixed_column_widths.js.map