function getSelectedAreas() {
  return MOUSE_SELECTED_AREAS;
}

const addAreaClipboardInteractions = (table, dl, write) => {
  const keyListener = event => {
    const meta = table.getMeta(event.target);

    switch (event.keyCode) {
      // C
      case 67:
        if (event.metaKey || event.ctrlKey) {
          areaClipboardCopy(table, dl);
          break;
        }

      // V

      case 86:
        if (event.metaKey || event.ctrlKey) {
          areaClipboardPaste(table, write);
          break;
        }

      // X

      case 88:
        if (event.metaKey || event.ctrlKey) {
          areaClipboardCut(table, dl, write);
          break;
        }

    }
  };

  table.addEventListener("keydown", keyListener);
  addAreaClipboardInteractionsStyleListener(table, dl);
  return table;
};

let AREA_CLIPBOARD_COPY_SELECTIONS = [];
let AREA_CLIPBOARD_COPIED_DATA = [];

const areaClipboardCopyData = dl => {
  const transpose = m => m[0].map((x, i) => m.map(x => x[i]));

  const data = AREA_CLIPBOARD_COPY_SELECTIONS.map(({
    x0,
    x1,
    y0,
    y1
  }) => dl(x0, y0, x1 + 1, y1 + 1).data);
  return data.map(transpose);
};

const areaClipboardCopy = async (table, dl) => {
  AREA_CLIPBOARD_COPY_SELECTIONS = getSelectedAreas();
  AREA_CLIPBOARD_COPIED_DATA = areaClipboardCopyData(dl);
  const textSelections = AREA_CLIPBOARD_COPIED_DATA.map(area => {
    return area.map(row => row.join("\t")).join("\n");
  });

  try {
    await navigator.clipboard.writeText(textSelections[0]);
    updateAreaClipboardInteractionsStyle(table);
  } catch (e) {
    console.error("Failed to writeText to navigator.clipboard.", e);
  }
};

const areaClipboardCut = async (table, dl, write) => {
  await areaClipboardCopy(table, dl);

  for (const {
    x0,
    x1,
    y0,
    y1
  } of AREA_CLIPBOARD_COPY_SELECTIONS) {
    for (var x = x0; x < x1 + 1; x++) {
      for (var y = y0; y < y1 + 1; y++) {
        write(x, y, undefined);
      }
    }
  }

  table.draw();
};

let AREA_CLIPBOARD_PASTE_SELECTIONS = [];

const areaClipboardPaste = async (table, write) => {
  const zip = (arr, ...arrs) => arr.map((val, i) => arrs.reduce((a, arr) => [...a, arr[i]], [val]));

  const parsedData = await tryParseAreaClipboardText();
  const useLocalData = eqArray(parsedData, AREA_CLIPBOARD_COPIED_DATA[0]);
  let data = [];

  if (!parsedData || useLocalData) {
    data = Array.from(Array(getSelectedAreas().length).keys()).flatMap(() => AREA_CLIPBOARD_COPIED_DATA);
  } else {
    data = Array.from(Array(getSelectedAreas().length).keys()).map(() => parsedData);
  }

  AREA_CLIPBOARD_PASTE_SELECTIONS = zip(getSelectedAreas(), data).map(([{
    x0,
    y0
  }, data]) => {
    data.map((row, ridx) => {
      row.map((value, cidx) => {
        write(x0 + cidx, y0 + ridx, value);
      });
    });
    const x1 = x0 + data[0].length - 1;
    const y1 = y0 + data.length - 1;
    return {
      x0,
      y0,
      x1,
      y1
    };
  });
  await table.draw();
};

async function tryParseAreaClipboardText() {
  try {
    const text = await navigator.clipboard.readText();
    const rows = text.split(/\r\n|\n|\r/);
    return rows.length > 0 ? rows.map(r => r.split("\t")) : r;
  } catch (e) {
    console.error("Failed to readText from navigator.clipboard.", e);
  }
}

function eqArray(a1, a2) {
  if (!Array.isArray(a1) || !Array.isArray(a2) || a1.length !== a2.length) return false;

  for (var i = 0; i < a1.length; i++) {
    const eqArrays = Array.isArray(a1[i]) && Array.isArray(a2[i]) && eqArray(a1[i], a2[i]);

    if (!eqArrays && a1[i] !== a2[i]) {
      return false;
    }
  }

  return true;
}

const AREA_CLIPBOARD_COPY_SELECTED_CLASS = "clipboard-copy-selected-area";
const AREA_CLIPBOARD_PASTE_SELECTED_CLASS = "clipboard-paste-selected-area";

const addAreaClipboardInteractionsStyleListener = table => {
  table.addStyleListener(() => updateAreaClipboardInteractionsStyle(table));
};

const updateAreaClipboardInteractionsStyle = table => {
  const tds = table.querySelectorAll("tbody td");

  for (const td of tds) {
    const meta = table.getMeta(td);
    td.classList.remove(AREA_CLIPBOARD_COPY_SELECTED_CLASS);
    td.classList.remove(AREA_CLIPBOARD_PASTE_SELECTED_CLASS);
    const copyMatch = AREA_CLIPBOARD_COPY_SELECTIONS.find(({
      x0,
      x1,
      y0,
      y1
    }) => x0 <= meta.x && meta.x <= x1 && y0 <= meta.y && meta.y <= y1);
    const pasteMatch = AREA_CLIPBOARD_PASTE_SELECTIONS.find(({
      x0,
      x1,
      y0,
      y1
    }) => x0 <= meta.x && meta.x <= x1 && y0 <= meta.y && meta.y <= y1);

    if (!!copyMatch) {
      td.classList.add(AREA_CLIPBOARD_COPY_SELECTED_CLASS);
    }

    if (!!pasteMatch) {
      td.classList.add(AREA_CLIPBOARD_PASTE_SELECTED_CLASS);
    }
  }
};

function generateDataListener(num_rows, num_columns) {
  const allData = range(0, num_columns, x => range(0, num_rows, y => `${x}, ${y}`));
  return function dl(x0, y0, x1, y1) {
    return {
      num_rows,
      num_columns,
      data: allData.slice(x0, x1).map(col => col.slice(y0, y1)),
      allData
    };
  };
}

window.addEventListener("load", () => {
  const table = window.areaClipboardInteractionsRegularTable;

  if (table) {
    const dl = generateDataListener(50, 50);
    table.setDataListener(dl);
    addAreaMouseSelection(table);

    const write = (x, y, value) => {
      dl().allData[x][y] = value;
    };

    addAreaClipboardInteractions(table, dl, write);
    table.draw();
  }
});
//# sourceMappingURL=area_clipboard.js.map