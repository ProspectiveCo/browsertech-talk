{"version":3,"sources":["fixed_column_widths.md"],"names":[],"mappings":"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","sourcesContent":["# Fixed Column Widths\n\nThis example shows how to set up columns with fixed widths in [`regular-table`](https://github.com/finos/regular-table) just using Javascript and CSS rules.\n\nBy default `<regular-table>` sets each column's width based on the content width of each of that column's cells. Currently, each column's width will not increase past the max width of the column's\ncontent, but you can manually shrink the column width up to the limit of 10 pixels. Column widths are calculated by the library using the max-width css rule meaning that setting the `max-width` from a\ncss rule will lead to a fixed width behavior for the cells of that column.\n\nTo start, we need a `<regular-table>` with an `id` that will be accessible on the window object using\n[`window.${id}`](https://stackoverflow.com/questions/18713272/why-do-dom-elements-exist-as-properties-on-the-window-object).\n\n```html\n<regular-table id=\"fixedColumnWidthsRegularTable\"></regular-table>\n```\n\n## Styling\n\nThen some `css` to define our `.fixed` `min-width` and `max-width`. We'll also need to disable default header text selection and handle overflow conditions that would otherwise cause some ugly content\nrendering.\n\n```css\nregular-table tr th.fixed-column-width,\nregular-table tr td.fixed-column-width {\n    min-width: 100px !important;\n    max-width: 100px !important;\n}\n\nregular-table thead tr th {\n    user-select: none;\n}\n\nregular-table tr th,\nregular-table tr td {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n}\n```\n\n## Adding a `StyleListener` with `fixColumnWidths()`\n\nIn our `fixColumnWidths()` function, we apply a `StyleListener` to the `<regular-table>` that iterates through each of the visible cells and adding or removing the `FIXED_COLUMN_WIDTH_CLASS` based on\nour `isFixed()` param.\n\nThe `isFixed()` parameter supplied should be a predicate function that given a the `table` and a `cell` determines if the cell is in a fixed column by returning `true` or `false`.\n\n```javascript\nconst FIXED_COLUMN_WIDTH_CLASS = \"fixed-column-width\";\n\nconst fixColumnWidths = (table, isFixed) => {\n    function clear(cell) {\n        cell.classList.remove(FIXED_COLUMN_WIDTH_CLASS);\n        cell.style.minWidth = \"\";\n    }\n\n    function styleListener() {\n        table.invalidate();\n        const ths = table.querySelectorAll(\"thead th\");\n        const tds = table.querySelectorAll(\"tbody td\");\n        for (const cell of [...ths, ...tds]) {\n            clear(cell);\n            if (isFixed(table, cell)) {\n                cell.classList.add(FIXED_COLUMN_WIDTH_CLASS);\n            }\n        }\n    }\n\n    table.addStyleListener(styleListener);\n    return table;\n};\n```\n\nWe'll need a predicate to pass in as an argument to `fixColumnWidths()` that will determine if the cell passed in `isFixed()`. For the purposes of this example, we'll check to see if the given cell's\nvalue contains `\"Fixed\"`, but this function could reference the `DataModel` or some other logic to make its decision.\n\n```javascript\nfunction isFixed(table, cell) {\n    const value = table.getMeta(cell).value;\n    return value.includes(\"Fixed\");\n}\n```\n\n## DataModel\n\nOur `DataModel` will generate a data set with alternating `\"Fixed\"` and `\"Not Set\"` values ensuring a mix of columns for testing in our example.\n\n```javascript\nclass DataModel {\n    constructor(columnCount, cellCount) {\n        this._baseColumns = [\"Fixed\", \"Not Set\"];\n        this._columnCount = columnCount;\n        this._cellCount = cellCount;\n        this._dataset = this._createDataset();\n        this.columns = this._createColumns();\n        this._data = this.columns.map(({ key }) => this._dataset[key]);\n        this._columnHeaders = this.columns.map(({ value }) => [value]);\n\n        this.dataListener = (x0, y0, x1, y1) => {\n            const data = this._data.slice(x0, x1).map((col) => col.slice(y0, y1));\n            const column_headers = this._columnHeaders.slice(x0, x1);\n            const num_columns = this._data.length;\n            const num_rows = this._data[0].length;\n            return {\n                num_rows,\n                num_columns,\n                column_headers,\n                data,\n            };\n        };\n    }\n\n    _createTextCells(text) {\n        return Array.from(Array(this._cellCount).keys()).map((idx) => `${text} ${idx}`);\n    }\n\n    _createColumns() {\n        return Array.from(Array(this._columnCount)).map((_, idx) => {\n            const key = this._baseColumns[idx % this._baseColumns.length];\n            return {\n                key,\n                value: `${key} Column ${idx}`,\n            };\n        });\n    }\n\n    _createDataset() {\n        return this._baseColumns.reduce(\n            (prev, curr) => ({\n                ...prev,\n                [curr]: this._createTextCells(curr),\n            }),\n            {}\n        );\n    }\n}\n```\n\nWithin our `init()` we will create a `DataModel` and call `setDataListener()` with its `DataListener`, giving our example a reasonable amount of data to test.\n\nNext we'll call our `fixColumnWidths()` function with the `#fixedColumnWidthsRegularTable` and our `isFixed()` predicate to decorate `<regular-table>` with our `StyleListener` and then invoke\n`draw()`.\n\nThis will all be fired on `\"load\"`.\n\n```javascript\nfunction init() {\n    const table = window.fixedColumnWidthsRegularTable;\n    if (table) {\n        const dataModel = new DataModel(20, 1000);\n        table.setDataListener(dataModel.dataListener);\n        fixColumnWidths(table, isFixed).draw();\n    }\n}\n\nwindow.addEventListener(\"load\", () => init());\n```\n\n## Appendix (Dependencies)\n\nAnd of course we'll need the libraries.\n\n```html\n<script src=\"/dist/esm/regular-table.js\"></script>\n<link rel=\"stylesheet\" href=\"/dist/css/material.css\" />\n```\n\n"]}