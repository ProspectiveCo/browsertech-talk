{"version":3,"sources":["area_clipboard.md"],"names":[],"mappings":"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","sourcesContent":["# Area Clipboard Interactions\n\nThis example adds clipboard edit interactions to the area selection behavior applied to a [`<regular-table>`](https://github.com/finos/regular-table), allowing the user to select groups of cells then\ncopy, paste and cut. First we'll add a `<regular-table>` to the page with an `id` accessible on the window object.\n\n```html\n<regular-table id=\"areaClipboardInteractionsRegularTable\"></regular-table>\n```\n\n## Extending Area Selection\n\nNow we'll need to make the area selection behavior available by including the `area_mouse_selection` example ...\n\n```html\n<script src=\"/dist/features/area_mouse_selection.js\"></script>\n```\n\nand we'll also need a quick helper `function` to `getSelectedAreas()`.\n\n```javascript\nfunction getSelectedAreas() {\n    return MOUSE_SELECTED_AREAS;\n}\n```\n\n## `addAreaClipboardInteractions()`\n\nWe'll create a single function to add the clipboard behavior to the `<regular-table>` passed in as the first argument. Additionally, it will take the `DataListener` and a `function` to `write` edits\nto the `DataModel`. Its direct responsibilities include adding `EventListener`s and the clipboard interaction's `StyleListener`. Our `EventListener` will dispatch to each of the behaviors for copy,\npaste and cut as expected - we'll define those next.\n\n```javascript\nconst addAreaClipboardInteractions = (table, dl, write) => {\n    const keyListener = (event) => {\n        const meta = table.getMeta(event.target);\n        switch (event.keyCode) {\n            // C\n            case 67:\n                if (event.metaKey || event.ctrlKey) {\n                    areaClipboardCopy(table, dl);\n                    break;\n                }\n            // V\n            case 86:\n                if (event.metaKey || event.ctrlKey) {\n                    areaClipboardPaste(table, write);\n                    break;\n                }\n            // X\n            case 88:\n                if (event.metaKey || event.ctrlKey) {\n                    areaClipboardCut(table, dl, write);\n                    break;\n                }\n        }\n    };\n\n    table.addEventListener(\"keydown\", keyListener);\n    addAreaClipboardInteractionsStyleListener(table, dl);\n    return table;\n};\n```\n\nFor our `areaClipboardCopy()`, we'll need to keep track of the `AREA_CLIPBOARD_COPY_SELECTIONS`. Each will represent a rectangular selection using familiar attributes `x0` as the upper left and `y1`\nas the lower right.\n\n```javascript\nlet AREA_CLIPBOARD_COPY_SELECTIONS = [];\n```\n\nWe'll also keep track of the data we get from the `DataListener` for the areas selected mapping over the selections then transposing the collection.\n\n```javascript\nlet AREA_CLIPBOARD_COPIED_DATA = [];\n\nconst areaClipboardCopyData = (dl) => {\n    const transpose = (m) => m[0].map((x, i) => m.map((x) => x[i]));\n    const data = AREA_CLIPBOARD_COPY_SELECTIONS.map(({ x0, x1, y0, y1 }) => dl(x0, y0, x1 + 1, y1 + 1).data);\n    return data.map(transpose);\n};\n```\n\nSo we'll start our `function` by keeping track of the `AREA_CLIPBOARD_COPY_SELECTIONS` and `AREA_CLIPBOARD_COPIED_DATA`. Next, we can generate the corresponding `textSelections` by splitting the lines\nwith `\\t` and selections with `\\n`.\n\nFinally, we write our generated text to the `navigator.clipboard` and update the styling. Don't worry, we'll define `updateAreaClipboardInteractionsStyle()` later.\n\n```javascript\nconst areaClipboardCopy = async (table, dl) => {\n    AREA_CLIPBOARD_COPY_SELECTIONS = getSelectedAreas();\n    AREA_CLIPBOARD_COPIED_DATA = areaClipboardCopyData(dl);\n\n    const textSelections = AREA_CLIPBOARD_COPIED_DATA.map((area) => {\n        return area.map((row) => row.join(\"\\t\")).join(\"\\n\");\n    });\n\n    try {\n        await navigator.clipboard.writeText(textSelections[0]);\n        updateAreaClipboardInteractionsStyle(table);\n    } catch (e) {\n        console.error(\"Failed to writeText to navigator.clipboard.\", e);\n    }\n};\n```\n\nFor our `areaClipboardCut()`, we can simply call `areaClipboardCopy()` prior to overwriting the data in the `DataModel` with `undefined`, clearing the selected region. Then we call `draw()` to ensure\nthe data in the `table` reflects the cut.\n\n```javascript\nconst areaClipboardCut = async (table, dl, write) => {\n    await areaClipboardCopy(table, dl);\n    for (const { x0, x1, y0, y1 } of AREA_CLIPBOARD_COPY_SELECTIONS) {\n        for (var x = x0; x < x1 + 1; x++) {\n            for (var y = y0; y < y1 + 1; y++) {\n                write(x, y, undefined);\n            }\n        }\n    }\n    table.draw();\n};\n```\n\nOur implementation of `areaClipboardPaste()` is a bit tricky as we'd like to cover a couple of use cases. If the user is copying multiple selections from our `table` and there are multiple areas\nselected in our `table` to paste to, then we'd like to paste the first copied selection to the first paste selection and the second copied selection to the second paste selection and so on... In the\nevent that the end user is copying from a different spreadsheet, we'll need to parse the text on the `clipboard` and attempt to `write` the parsed content to our `table`.\n\nIf the `parsedData` is unusable, we can only try to write the `AREA_CLIPBOARD_COPIED_DATA`. We'll also `useLocalData` if it matches the what's been parsed from the `clipboard`. Otherwise, we know that\nthe `data` on the `clipboard` came from outside of `<regular-table>`, and we should map it to each of the selected areas we're pasting to. We'll want to keep track of the\n`AREA_CLIPBOARD_PASTE_SELECTIONS` to style the areas we paste to using the same structure as `AREA_CLIPBOARD_COPY_SELECTIONS`.\n\n```javascript\nlet AREA_CLIPBOARD_PASTE_SELECTIONS = [];\n```\n\nWe'll then duplicate the `data` collection to ensure we can paste into all of the currently selected areas and zip the collections - pairing the currently selected areas with copied data. We can then\niterate through the zipped collection writing the data to for each of the selections and calculating the pasted areas' dimensions. Finally, we call `draw()` to force the `table` to update the `date`\nshown.\n\n```javascript\nconst areaClipboardPaste = async (table, write) => {\n    const zip = (arr, ...arrs) => arr.map((val, i) => arrs.reduce((a, arr) => [...a, arr[i]], [val]));\n\n    const parsedData = await tryParseAreaClipboardText();\n    const useLocalData = eqArray(parsedData, AREA_CLIPBOARD_COPIED_DATA[0]);\n\n    let data = [];\n    if (!parsedData || useLocalData) {\n        data = Array.from(Array(getSelectedAreas().length).keys()).flatMap(() => AREA_CLIPBOARD_COPIED_DATA);\n    } else {\n        data = Array.from(Array(getSelectedAreas().length).keys()).map(() => parsedData);\n    }\n\n    AREA_CLIPBOARD_PASTE_SELECTIONS = zip(getSelectedAreas(), data).map(([{ x0, y0 }, data]) => {\n        data.map((row, ridx) => {\n            row.map((value, cidx) => {\n                write(x0 + cidx, y0 + ridx, value);\n            });\n        });\n\n        const x1 = x0 + data[0].length - 1;\n        const y1 = y0 + data.length - 1;\n        return { x0, y0, x1, y1 };\n    });\n\n    await table.draw();\n};\n```\n\nOur implementation of `tryParseAreaClipboardText()` takes the current `clipboard` text and attempts to map it assuming that it's formatted similar to content copied from a spreadsheet.\n\n```javascript\nasync function tryParseAreaClipboardText() {\n    try {\n        const text = await navigator.clipboard.readText();\n        const rows = text.split(/\\r\\n|\\n|\\r/);\n        return rows.length > 0 ? rows.map((r) => r.split(\"\\t\")) : r;\n    } catch (e) {\n        console.error(\"Failed to readText from navigator.clipboard.\", e);\n    }\n}\n```\n\nWe'll also need a quick `function` to compare our `Array`s of data for `areaClipboardPaste()`.\n\n```javascript\nfunction eqArray(a1, a2) {\n    if (!Array.isArray(a1) || !Array.isArray(a2) || a1.length !== a2.length) return false;\n    for (var i = 0; i < a1.length; i++) {\n        const eqArrays = Array.isArray(a1[i]) && Array.isArray(a2[i]) && eqArray(a1[i], a2[i]);\n        if (!eqArrays && a1[i] !== a2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n```\n\n## Styling\n\nSimilar to other examples like `row_column_area_selection`, we will use a primary color scheme to show the selected areas and their overlap with areas that are being copied or have been pasted to.\n\n```css\nregular-table tbody tr td.mouse-selected-area {\n    background-color: rgb(255, 0, 0, 0.25); /* red */\n}\nregular-table tbody tr td.clipboard-paste-selected-area {\n    background-color: rgb(255, 255, 0, 0.25); /* yellow */\n}\nregular-table tbody tr td.clipboard-copy-selected-area {\n    background-color: rgb(0, 0, 255, 0.15); /* blue */\n}\nregular-table tbody tr td.mouse-selected-area.clipboard-copy-selected-area {\n    background-color: rgb(128, 0, 128, 0.33); /* violet */\n}\nregular-table tbody tr td.mouse-selected-area.clipboard-paste-selected-area {\n    background-color: rgb(255, 165, 0, 0.33); /* orange */\n}\nregular-table tbody tr td.clipboard-copy-selected-area.clipboard-paste-selected-area {\n    background-color: rgb(50, 205, 50, 0.33); /* green */\n}\nregular-table tbody tr td.mouse-selected-area.clipboard-copy-selected-area.clipboard-paste-selected-area {\n    background-color: rgb(183, 65, 14, 0.33); /* rust */\n}\n```\n\nLets turn off the `user-select` style for this example too\n\n```css\nregular-table tbody tr td {\n    user-select: none;\n}\nregular-table tbody tr th {\n    user-select: none;\n}\nregular-table thead tr th {\n    user-select: none;\n}\n```\n\nAnd outline the `td`s.\n\n```css\ntd {\n    outline: none;\n    border-right: 1px solid #eee;\n    border-bottom: 1px solid #eee;\n    min-width: 22px;\n}\n```\n\n## `StyleListener`\n\nWe'll need to add a `StyleListener` to `add` or `remove` the classes for copy and paste.\n\n```javascript\nconst AREA_CLIPBOARD_COPY_SELECTED_CLASS = \"clipboard-copy-selected-area\";\nconst AREA_CLIPBOARD_PASTE_SELECTED_CLASS = \"clipboard-paste-selected-area\";\n\nconst addAreaClipboardInteractionsStyleListener = (table) => {\n    table.addStyleListener(() => updateAreaClipboardInteractionsStyle(table));\n};\n```\n\nWe'll make the logic for updating the `classList` available via a `function` that can be called outside of the `StyleListener`, so that we can invoke it without forcing a `draw()` on the `table`.\nBasically, `updateAreaClipboardInteractionsStyle()` iterates through the `td`s on the screen removing the `AREA_CLIPBOARD_COPY_SELECTED_CLASS` and `AREA_CLIPBOARD_PASTE_SELECTED_CLASS` from each and\nthen checks to see if the `MetaData` shows that it intersects a copied or pasted selection, reapplying the classes on a match.\n\n```javascript\nconst updateAreaClipboardInteractionsStyle = (table) => {\n    const tds = table.querySelectorAll(\"tbody td\");\n    for (const td of tds) {\n        const meta = table.getMeta(td);\n        td.classList.remove(AREA_CLIPBOARD_COPY_SELECTED_CLASS);\n        td.classList.remove(AREA_CLIPBOARD_PASTE_SELECTED_CLASS);\n\n        const copyMatch = AREA_CLIPBOARD_COPY_SELECTIONS.find(({ x0, x1, y0, y1 }) => x0 <= meta.x && meta.x <= x1 && y0 <= meta.y && meta.y <= y1);\n\n        const pasteMatch = AREA_CLIPBOARD_PASTE_SELECTIONS.find(({ x0, x1, y0, y1 }) => x0 <= meta.x && meta.x <= x1 && y0 <= meta.y && meta.y <= y1);\n\n        if (!!copyMatch) {\n            td.classList.add(AREA_CLIPBOARD_COPY_SELECTED_CLASS);\n        }\n        if (!!pasteMatch) {\n            td.classList.add(AREA_CLIPBOARD_PASTE_SELECTED_CLASS);\n        }\n    }\n};\n```\n\n## Our `DataListener`\n\nOur `DataListener` generator uses some borrowed code from `two_billion_rows` and extends the `return`ed `object` with `allData` - exposed to enable our `write` `function`.\n\n```javascript\nfunction generateDataListener(num_rows, num_columns) {\n    const allData = range(0, num_columns, (x) => range(0, num_rows, (y) => `${x}, ${y}`));\n    return function dl(x0, y0, x1, y1) {\n        return {\n            num_rows,\n            num_columns,\n            data: allData.slice(x0, x1).map((col) => col.slice(y0, y1)),\n            allData,\n        };\n    };\n}\n```\n\n## On `\"load\"`\n\nWe will wire it all up on `\"load\"` by checking that the `table` exists on the `window` then creating and setting our `DataListener`. We need to make sure that we `addAreaMouseSelection()` and create a\n`write()` `function` for use in `addAreaClipboardInteractions()`, and then we can `addAreaClipboardInteractions()` and kick off a `draw()`.\n\n```javascript\nwindow.addEventListener(\"load\", () => {\n    const table = window.areaClipboardInteractionsRegularTable;\n    if (table) {\n        const dl = generateDataListener(50, 50);\n        table.setDataListener(dl);\n\n        addAreaMouseSelection(table);\n\n        const write = (x, y, value) => {\n            dl().allData[x][y] = value;\n        };\n\n        addAreaClipboardInteractions(table, dl, write);\n        table.draw();\n    }\n});\n```\n\n## Appendix (Dependencies)\n\nOur Libraries.\n\n```html\n<script src=\"/dist/esm/regular-table.js\"></script>\n<link rel=\"stylesheet\" href=\"/dist/css/material.css\" />\n```\n\nThe `two_billion_rows` example for the its helper `function`s.\n\n```html\n<script src=\"/dist/examples/two_billion_rows.js\"></script>\n```\n\n"]}