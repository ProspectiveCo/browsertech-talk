import u from"../../dist/pkg/web/perspective-server.wasm";import w from"../../src/ts/perspective-server.worker.js";function p(){let e,t=new Promise(r=>{e=r});return[e,t]}async function d(e,t){let[r,n]=p();e.addEventListener("message",function o(s){e.removeEventListener("message",o),r(null)}),e.postMessage({cmd:"init",args:[t]},{transfer:[t]}),await n}async function c(e){let[t,r]=await Promise.all([u().then(s=>s instanceof Response?s.arrayBuffer():s.slice(0)),w()]),{Client:n}=await e,o=new n(s=>{let i=s.slice().buffer;r.postMessage(i,{transfer:[i]})},()=>{console.debug("Closing WebWorker"),r.terminate()});return await d(r,t),r.addEventListener("message",s=>{o.handle_response(s.data)}),await o.init(),o}async function m(e,t){let{Client:r}=await e,n=new WebSocket(t),[o,s]=p();n.onopen=o,n.binaryType="arraybuffer",await s;let i=new r(a=>{let l=a.slice().buffer;n.send(l)},()=>{console.debug("Closing WebSocket"),n.close()});return n.onmessage=a=>{i.handle_response(a.data)},await i.init(),i}async function f(){let e=customElements.get("perspective-viewer");return e||(console.warn("No `<perspective-viewer>` Custom Element found, waiting"),await customElements.whenDefined("perspective-viewer"),e=customElements.get("perspective-viewer")),e.__wasm_module__}async function y(e){let t=f();return await m(t,e)}async function g(){let e=f();return await c.call(void 0,e)}var b={websocket:y,worker:g};export{f as compile_perspective,b as default,y as websocket,g as worker};
//# sourceMappingURL=perspective.js.map
