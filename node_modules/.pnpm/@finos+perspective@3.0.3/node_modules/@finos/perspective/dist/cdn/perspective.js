var a="./perspective-server.wasm";function j(){return fetch(new URL("./perspective-server.wasm",import.meta.url))}var k="./perspective-server.js";async function v(){let e=new URL("./perspective-server.js",import.meta.url);return await(await fetch(e)).text()}function l(e,t){function s(r,o){e.push(o)}function i(r){let o=e.indexOf(r);o>-1&&e.splice(o,1)}function n(r){for(let o of t)o({data:r})}return{addEventListener:s,removeEventListener:i,postMessage:n,location:{href:""}}}function y(e){let t=Function("const self = arguments[0];"+e),s=[],i=[];return t(l(s,i)),l(i,s)}var h=async function(){let e=await v();if(window.location.protocol.startsWith("file")&&!window.isElectron)return console.warn("file:// protocol does not support Web Workers"),y(e);try{let t=new Blob([e],{type:"application/javascript"}),s=URL.createObjectURL(t);return new Worker(s,{type:"module"})}catch(t){return console.warn("Failed to instantiate worker, falling back to single-threaded runtime",t),y(e)}},A=h;function c(){let e,t=new Promise(s=>{e=s});return[e,t]}async function O(e,t){let[s,i]=c();e.addEventListener("message",function n(r){e.removeEventListener("message",n),s(null)}),e.postMessage({cmd:"init",args:[t]},{transfer:[t]}),await i}async function _(e){let[t,s]=await Promise.all([j().then(r=>r instanceof Response?r.arrayBuffer():r.slice(0)),A()]),{Client:i}=await e,n=new i(r=>{let o=r.slice().buffer;s.postMessage(o,{transfer:[o]})},()=>{console.debug("Closing WebWorker"),s.terminate()});return await O(s,t),s.addEventListener("message",r=>{n.handle_response(r.data)}),await n.init(),n}async function M(e,t){let{Client:s}=await e,i=new WebSocket(t),[n,r]=c();i.onopen=n,i.binaryType="arraybuffer",await r;let o=new s(f=>{let g=f.slice().buffer;i.send(g)},()=>{console.debug("Closing WebSocket"),i.close()});return i.onmessage=f=>{o.handle_response(f.data)},await o.init(),o}async function u(){let e=customElements.get("perspective-viewer");return e||(console.warn("No `<perspective-viewer>` Custom Element found, waiting"),await customElements.whenDefined("perspective-viewer"),e=customElements.get("perspective-viewer")),e.__wasm_module__}async function G(e){let t=u();return await M(t,e)}async function m(){let e=u();return await _.call(void 0,e)}var p={websocket:G,worker:m};export{u as compile_perspective,p as default,G as websocket,m as worker};
//# sourceMappingURL=perspective.js.map
