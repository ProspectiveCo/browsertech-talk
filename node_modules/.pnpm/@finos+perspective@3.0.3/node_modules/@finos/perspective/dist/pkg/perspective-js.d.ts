/* tslint:disable */
/* eslint-disable */
/**
*/
export function init(): void;

export type * from "../../src/ts/ts-rs/ViewWindow.d.ts";
export type * from "../../src/ts/ts-rs/TableInitOptions.d.ts";
export type * from "../../src/ts/ts-rs/ViewConfigUpdate.d.ts";
export type * from "../../src/ts/ts-rs/OnUpdateArgs.d.ts";
export type * from "../../src/ts/ts-rs/OnUpdateOptions.d.ts";
export type * from "../../src/ts/ts-rs/UpdateOptions.d.ts";

import type * as table_init_options from "../../src/ts/ts-rs/ViewWindow.d.ts";
import type * as table_init_options from "../../src/ts/ts-rs/TableInitOptions.d.ts";
import type * as view_config_update from "../../src/ts/ts-rs/ViewConfigUpdate.d.ts";
import type * as on_update_args from "../../src/ts/ts-rs/OnUpdateArgs.d.ts";
import type * as on_update_options from "../../src/ts/ts-rs/OnUpdateOptions.d.ts";
import type * as update_options from "../../src/ts/ts-rs/UpdateOptions.d.ts";


/**
*/
export class Client {
  free(): void;
/**
* @param {Function} send_request
* @param {Function | undefined} [close]
*/
  constructor(send_request: Function, close?: Function);
/**
* @returns {Promise<void>}
*/
  init(): Promise<void>;
/**
* @param {any} value
* @returns {Promise<void>}
*/
  handle_response(value: any): Promise<void>;
/**
* @param {string | ArrayBuffer | Record<string, Array> | Record<string, unknown>[]} value
* @param {table_init_options.TableInitOptions | undefined} [options]
* @returns {Promise<Table>}
*/
  table(value: string | ArrayBuffer | Record<string, Array> | Record<string, unknown>[], options?: table_init_options.TableInitOptions): Promise<Table>;
/**
* @returns {any}
*/
  terminate(): any;
/**
* @param {string} entity_id
* @returns {Promise<Table>}
*/
  open_table(entity_id: string): Promise<Table>;
/**
* @returns {Promise<any>}
*/
  get_hosted_table_names(): Promise<any>;
/**
* @returns {Promise<any>}
*/
  system_info(): Promise<any>;
}
/**
*/
export class Table {
  free(): void;
/**
* @returns {Promise<string | undefined>}
*/
  get_index(): Promise<string | undefined>;
/**
* @returns {Promise<Client>}
*/
  get_client(): Promise<Client>;
/**
* @returns {Promise<number | undefined>}
*/
  get_limit(): Promise<number | undefined>;
/**
* @returns {Promise<void>}
*/
  clear(): Promise<void>;
/**
* @returns {Promise<void>}
*/
  delete(): Promise<void>;
/**
* @returns {Promise<number>}
*/
  size(): Promise<number>;
/**
* @returns {Promise<any>}
*/
  schema(): Promise<any>;
/**
* @returns {Promise<any>}
*/
  columns(): Promise<any>;
/**
* @returns {Promise<number>}
*/
  make_port(): Promise<number>;
/**
* @param {Function} on_delete
* @returns {Promise<number>}
*/
  on_delete(on_delete: Function): Promise<number>;
/**
* @param {number} callback_id
* @returns {Promise<any>}
*/
  remove_delete(callback_id: number): Promise<any>;
/**
* @param {any} value
* @returns {Promise<void>}
*/
  remove(value: any): Promise<void>;
/**
* @param {any} input
* @returns {Promise<void>}
*/
  replace(input: any): Promise<void>;
/**
* @param {string | ArrayBuffer | Record<string, Array> | Record<string, unknown>[]} input
* @param {update_options.UpdateOptions | undefined} [options]
* @returns {Promise<void>}
*/
  update(input: string | ArrayBuffer | Record<string, Array> | Record<string, unknown>[], options?: update_options.UpdateOptions): Promise<void>;
/**
* @param {view_config_update.ViewConfigUpdate | undefined} [config]
* @returns {Promise<View>}
*/
  view(config?: view_config_update.ViewConfigUpdate): Promise<View>;
/**
* @param {any} exprs
* @returns {Promise<any>}
*/
  validate_expressions(exprs: any): Promise<any>;
/**
* @returns {number}
*/
  unsafe_get_model(): number;
}
/**
*/
export class View {
  free(): void;
/**
* @returns {View}
*/
  __get_model(): View;
/**
* @returns {Promise<any>}
*/
  column_paths(): Promise<any>;
/**
* @returns {Promise<void>}
*/
  delete(): Promise<void>;
/**
* @returns {Promise<any>}
*/
  dimensions(): Promise<any>;
/**
* @returns {Promise<any>}
*/
  expression_schema(): Promise<any>;
/**
* @returns {Promise<any>}
*/
  get_config(): Promise<any>;
/**
* @param {string} name
* @returns {Promise<Array<any>>}
*/
  get_min_max(name: string): Promise<Array<any>>;
/**
* @returns {Promise<number>}
*/
  num_rows(): Promise<number>;
/**
* @returns {Promise<any>}
*/
  schema(): Promise<any>;
/**
* @param {view_window.ViewWindow | undefined} [window]
* @returns {Promise<ArrayBuffer>}
*/
  to_arrow(window?: view_window.ViewWindow): Promise<ArrayBuffer>;
/**
* @param {view_window.ViewWindow | undefined} [window]
* @returns {Promise<string>}
*/
  to_columns_string(window?: view_window.ViewWindow): Promise<string>;
/**
* @param {view_window.ViewWindow | undefined} [window]
* @returns {Promise<object>}
*/
  to_columns(window?: view_window.ViewWindow): Promise<object>;
/**
* @param {view_window.ViewWindow | undefined} [window]
* @returns {Promise<string>}
*/
  to_json_string(window?: view_window.ViewWindow): Promise<string>;
/**
* @param {view_window.ViewWindow | undefined} [window]
* @returns {Promise<Array<any>>}
*/
  to_json(window?: view_window.ViewWindow): Promise<Array<any>>;
/**
* @param {view_window.ViewWindow | undefined} [window]
* @returns {Promise<string>}
*/
  to_csv(window?: view_window.ViewWindow): Promise<string>;
/**
* @param {Function} on_update_js
* @param {on_update_options.OnUpdateOptions | undefined} [options]
* @returns {Promise<number>}
*/
  on_update(on_update_js: Function, options?: on_update_options.OnUpdateOptions): Promise<number>;
/**
* @param {number} callback_id
* @returns {Promise<void>}
*/
  remove_update(callback_id: number): Promise<void>;
/**
* @param {Function} on_delete
* @returns {Promise<number>}
*/
  on_delete(on_delete: Function): Promise<number>;
/**
* @returns {Promise<number>}
*/
  num_columns(): Promise<number>;
/**
* @param {number} callback_id
* @returns {Promise<any>}
*/
  remove_delete(callback_id: number): Promise<any>;
/**
* @param {number} row_index
* @returns {Promise<number>}
*/
  collapse(row_index: number): Promise<number>;
/**
* @param {number} row_index
* @returns {Promise<number>}
*/
  expand(row_index: number): Promise<number>;
/**
* @param {number} depth
* @returns {Promise<void>}
*/
  set_depth(depth: number): Promise<void>;
}

export type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

export interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly __wbg_client_free: (a: number) => void;
  readonly client_new: (a: number, b: number) => number;
  readonly client_init: (a: number) => number;
  readonly client_handle_response: (a: number, b: number) => number;
  readonly client_table: (a: number, b: number, c: number) => number;
  readonly client_terminate: (a: number, b: number) => void;
  readonly client_open_table: (a: number, b: number, c: number) => number;
  readonly client_get_hosted_table_names: (a: number) => number;
  readonly client_system_info: (a: number) => number;
  readonly __wbg_table_free: (a: number) => void;
  readonly table_get_index: (a: number) => number;
  readonly table_get_client: (a: number) => number;
  readonly table_get_limit: (a: number) => number;
  readonly table_clear: (a: number) => number;
  readonly table_delete: (a: number) => number;
  readonly table_size: (a: number) => number;
  readonly table_schema: (a: number) => number;
  readonly table_columns: (a: number) => number;
  readonly table_make_port: (a: number) => number;
  readonly table_on_delete: (a: number, b: number) => number;
  readonly table_remove_delete: (a: number, b: number) => number;
  readonly table_remove: (a: number, b: number) => number;
  readonly table_replace: (a: number, b: number) => number;
  readonly table_update: (a: number, b: number, c: number) => number;
  readonly table_view: (a: number, b: number) => number;
  readonly table_validate_expressions: (a: number, b: number) => number;
  readonly table_unsafe_get_model: (a: number) => number;
  readonly __wbg_view_free: (a: number) => void;
  readonly view___get_model: (a: number) => number;
  readonly view_column_paths: (a: number) => number;
  readonly view_delete: (a: number) => number;
  readonly view_dimensions: (a: number) => number;
  readonly view_expression_schema: (a: number) => number;
  readonly view_get_config: (a: number) => number;
  readonly view_get_min_max: (a: number, b: number, c: number) => number;
  readonly view_num_rows: (a: number) => number;
  readonly view_schema: (a: number) => number;
  readonly view_to_arrow: (a: number, b: number) => number;
  readonly view_to_columns_string: (a: number, b: number) => number;
  readonly view_to_columns: (a: number, b: number) => number;
  readonly view_to_json_string: (a: number, b: number) => number;
  readonly view_to_json: (a: number, b: number) => number;
  readonly view_to_csv: (a: number, b: number) => number;
  readonly view_on_update: (a: number, b: number, c: number) => number;
  readonly view_remove_update: (a: number, b: number) => number;
  readonly view_on_delete: (a: number, b: number) => number;
  readonly view_num_columns: (a: number) => number;
  readonly view_remove_delete: (a: number, b: number) => number;
  readonly view_collapse: (a: number, b: number) => number;
  readonly view_expand: (a: number, b: number) => number;
  readonly view_set_depth: (a: number, b: number) => number;
  readonly init: () => void;
  readonly __wbindgen_export_0: (a: number, b: number) => number;
  readonly __wbindgen_export_1: (a: number, b: number, c: number, d: number) => number;
  readonly __wbindgen_export_2: WebAssembly.Table;
  readonly __wbindgen_export_3: (a: number, b: number, c: number) => void;
  readonly __wbindgen_add_to_stack_pointer: (a: number) => number;
  readonly __wbindgen_export_4: (a: number, b: number, c: number) => void;
  readonly __wbindgen_export_5: (a: number) => void;
  readonly __wbindgen_export_6: (a: number, b: number, c: number, d: number) => void;
}

export type SyncInitInput = BufferSource | WebAssembly.Module;
/**
* Instantiates the given `module`, which can either be bytes or
* a precompiled `WebAssembly.Module`.
*
* @param {SyncInitInput} module
*
* @returns {InitOutput}
*/
export function initSync(module: SyncInitInput): InitOutput;

/**
* If `module_or_path` is {RequestInfo} or {URL}, makes a request and
* for everything else, calls `WebAssembly.instantiate` directly.
*
* @param {InitInput | Promise<InitInput>} module_or_path
*
* @returns {Promise<InitOutput>}
*/
export default function __wbg_init (module_or_path: InitInput | Promise<InitInput>): Promise<InitOutput>;
